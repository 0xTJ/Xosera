
xosera_gfx_test.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <START>:
    2000:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2004:	41fa fffa      	lea %pc@(2000 <START>),%a0
    2008:	43f9 0000 2000 	lea 2000 <START>,%a1
    200e:	203c 0000 2054 	movel #8276,%d0
    2014:	9089           	subl %a1,%d0
    2016:	e488           	lsrl #2,%d0
    2018:	5380           	subql #1,%d0
    201a:	22d8           	movel %a0@+,%a1@+
    201c:	51c8 fffc      	dbf %d0,201a <START+0x1a>
    2020:	4ef9 0000 2026 	jmp 2026 <_init_end>

Disassembly of section .text.postinit:

00002026 <_postinit>:
    2026:	203c 0000 35b4 	movel #13748,%d0
    202c:	9089           	subl %a1,%d0
    202e:	e488           	lsrl #2,%d0
    2030:	2200           	movel %d0,%d1
    2032:	4841           	swap %d1
    2034:	6002           	bras 2038 <_postinit+0x12>
    2036:	22d8           	movel %a0@+,%a1@+
    2038:	51c8 fffc      	dbf %d0,2036 <_postinit+0x10>
    203c:	51c9 fff8      	dbf %d1,2036 <_postinit+0x10>

00002040 <PREMAIN>:
    2040:	2f38 0004      	movel 4 <DUART_CTUR>,%sp@-
    2044:	41f9 0000 3380 	lea 3380 <__kinit>,%a0
    204a:	4e90           	jsr %a0@
    204c:	41f9 0000 2054 	lea 2054 <_postinit_end>,%a0
    2052:	4ed0           	jmp %a0@

Disassembly of section .text:

00002054 <kmain>:

extern void xosera_mode_test();

void kmain()
{
    mcDelaymsec10(200);        // wait a bit for terminal window
    2054:	4878 00c8      	pea c8 <MFP_VECBASE+0x88>
    2058:	4eb9 0000 3370 	jsr 3370 <mcDelaymsec10>
    xosera_mode_test();
    205e:	588f           	addql #4,%sp
    2060:	4ef9 0000 20d2 	jmp 20d2 <xosera_mode_test>

00002066 <dprintf>:
    }
}

static char dprint_buff[4096];
static void dprintf(const char * fmt, ...)
{
    2066:	4e56 0000      	linkw %fp,#0
    206a:	2f03           	movel %d3,%sp@-
    206c:	2f02           	movel %d2,%sp@-
    va_list args;
    va_start(args, fmt);
    vsnprintf(dprint_buff, sizeof(dprint_buff), fmt, args);
    206e:	486e 000c      	pea %fp@(12)
    2072:	2f2e 0008      	movel %fp@(8),%sp@-
    2076:	4878 1000      	pea 1000 <EFP_ATA_IDENT+0xb74>
    207a:	4879 0000 35bc 	pea 35bc <dprint_buff>
    2080:	4eb9 0000 32e2 	jsr 32e2 <vsnprintf_>
    while ((c = *str++) != '\0')
    2086:	1439 0000 35bc 	moveb 35bc <dprint_buff>,%d2
    208c:	4fef 0010      	lea %sp@(16),%sp
    2090:	6718           	beqs 20aa <dprintf+0x44>
    2092:	41f9 0000 35bd 	lea 35bd <dprint_buff+0x1>,%a0
    __asm__ __volatile__(
    2098:	760d           	moveq #13,%d3
        if (c == '\n')
    209a:	0c02 000a      	cmpib #10,%d2
    209e:	6716           	beqs 20b6 <dprintf+0x50>
    __asm__ __volatile__(
    20a0:	3002           	movew %d2,%d0
    20a2:	7202           	moveq #2,%d1
    20a4:	4e4e           	trap #14
    while ((c = *str++) != '\0')
    20a6:	1418           	moveb %a0@+,%d2
    20a8:	66f0           	bnes 209a <dprintf+0x34>
    dprint(dprint_buff);
    va_end(args);
}
    20aa:	242e fff8      	movel %fp@(-8),%d2
    20ae:	262e fffc      	movel %fp@(-4),%d3
    20b2:	4e5e           	unlk %fp
    20b4:	4e75           	rts
    __asm__ __volatile__(
    20b6:	3003           	movew %d3,%d0
    20b8:	7202           	moveq #2,%d1
    20ba:	4e4e           	trap #14
    20bc:	3002           	movew %d2,%d0
    20be:	7202           	moveq #2,%d1
    20c0:	4e4e           	trap #14
    while ((c = *str++) != '\0')
    20c2:	1418           	moveb %a0@+,%d2
    20c4:	66d4           	bnes 209a <dprintf+0x34>
}
    20c6:	242e fff8      	movel %fp@(-8),%d2
    20ca:	262e fffc      	movel %fp@(-4),%d3
    20ce:	4e5e           	unlk %fp
    20d0:	4e75           	rts

000020d2 <xosera_mode_test>:
}


uint32_t test_count;
void     xosera_mode_test()
{
    20d2:	518f           	subql #8,%sp
    20d4:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    // flush any input charaters to avoid instant exit
    while (checkchar())
    20d8:	47f9 0000 3362 	lea 3362 <mcCheckchar>,%a3
    {
        readchar();
    20de:	45f9 0000 3358 	lea 3358 <mcReadchar>,%a2
    while (checkchar())
    20e4:	4e93           	jsr %a3@
    20e6:	4a00           	tstb %d0
    20e8:	6708           	beqs 20f2 <xosera_mode_test+0x20>
        readchar();
    20ea:	4e92           	jsr %a2@
    while (checkchar())
    20ec:	4e93           	jsr %a3@
    20ee:	4a00           	tstb %d0
    20f0:	66f8           	bnes 20ea <xosera_mode_test+0x18>
    }

    dprintf("Xosera_gfx_test\n");
    20f2:	4879 0000 34d2 	pea 34d2 <__mulsi3+0x6a>
    20f8:	4df9 0000 2066 	lea 2066 <dprintf>,%fp
    20fe:	4e96           	jsr %fp@

    dprintf("\nxosera_init(1)...");
    2100:	4879 0000 34e3 	pea 34e3 <__mulsi3+0x7b>
    2106:	4e96           	jsr %fp@
    // wait for monitor to unblank
    bool success = xosera_init(1);
    2108:	4878 0001      	pea 1 <ROSCO_M68K_SYSLIBS>
    210c:	4eb9 0000 2402 	jsr 2402 <xosera_init>
    dprintf("%s (%dx%d)\n", success ? "succeeded" : "FAILED", xv_reg_getw(vidwidth), xv_reg_getw(vidheight));
    2112:	207c 00f8 0060 	moveal #16253024,%a0
    2118:	7209           	moveq #9,%d1
    211a:	0388 0000      	movepw %d1,%a0@(0)
    211e:	0508 0018      	movepw %a0@(24),%d2
    2122:	0282 0000 ffff 	andil #65535,%d2
    2128:	7208           	moveq #8,%d1
    212a:	0388 0000      	movepw %d1,%a0@(0)
    212e:	0308 0018      	movepw %a0@(24),%d1
    2132:	0281 0000 ffff 	andil #65535,%d1
    2138:	4fef 000c      	lea %sp@(12),%sp
    213c:	4a00           	tstb %d0
    213e:	6600 0294      	bnew 23d4 <xosera_mode_test+0x302>
    2142:	203c 0000 34cb 	movel #13515,%d0
    2148:	2f02           	movel %d2,%sp@-
    214a:	2f01           	movel %d1,%sp@-
    214c:	2f00           	movel %d0,%sp@-
    214e:	4879 0000 34f6 	pea 34f6 <__mulsi3+0x8e>
    2154:	4e96           	jsr %fp@
    2156:	4fef 0010      	lea %sp@(16),%sp
    215a:	243c 0000 0fa0 	movel #4000,%d2
        delay(d);
    2160:	49f9 0000 3408 	lea 3408 <__divsi3>,%a4
    2166:	4bf9 0000 3370 	lea 3370 <mcDelaymsec10>,%a5
        if (checkchar())
    216c:	4e93           	jsr %a3@
    216e:	4a00           	tstb %d0
    2170:	6600 025a      	bnew 23cc <xosera_mode_test+0x2fa>
        if (d > 100)
    2174:	2602           	movel %d2,%d3
    2176:	7064           	moveq #100,%d0
    2178:	b082           	cmpl %d2,%d0
    217a:	6c02           	bges 217e <xosera_mode_test+0xac>
    217c:	7664           	moveq #100,%d3
        delay(d);
    217e:	4878 000a      	pea a <DUART_CSRB>
    2182:	2f03           	movel %d3,%sp@-
    2184:	4e94           	jsr %a4@
    2186:	588f           	addql #4,%sp
    2188:	2e80           	movel %d0,%sp@
    218a:	4e95           	jsr %a5@
        ms -= d;
    218c:	9483           	subl %d3,%d2
    while (ms > 0)
    218e:	588f           	addql #4,%sp
    2190:	4a82           	tstl %d2
    2192:	6ed8           	bgts 216c <xosera_mode_test+0x9a>
        return;
    }

    while (true)
    {
        xv_reg_setw(gfxctrl, 0x0080);
    2194:	7e04           	moveq #4,%d7
    2196:	247c 00f8 0060 	moveal #16253024,%a2
    xv_setw(wr_inc, 1);
    219c:	7c01           	moveq #1,%d6
        xv_reg_setw(gfxctrl, 0x0080);
    219e:	323c 0080      	movew #128,%d1
    21a2:	0f8a 0000      	movepw %d7,%a2@(0)
    21a6:	038a 0018      	movepw %d1,%a2@(24)
    screen_addr   = 0;          // xv_reg_getw(dispstart);
    21aa:	4279 0000 35ba 	clrw 35ba <screen_addr>
    text_columns  = 106;        // xv_reg_getw(dispwidth);
    21b0:	13fc 006a 0000 	moveb #106,35b9 <text_columns>
    21b6:	35b9 
    text_rows = 480 / tile_size;
    21b8:	13fc 001e 0000 	moveb #30,35b8 <text_rows>
    21be:	35b8 
    xv_setw(wr_addr, screen_addr);
    21c0:	4240           	clrw %d0
    21c2:	018a 000c      	movepw %d0,%a2@(12)
    xv_setw(wr_inc, 1);
    21c6:	0d8a 0024      	movepw %d6,%a2@(36)
    xv_setbh(data, text_color);
    21ca:	13f9 0000 35b0 	moveb 35b0 <_code_end>,f80070 <MFP_UDR+0x41>
    21d0:	00f8 0070 
    for (uint16_t i = 0; i < (text_columns * text_rows); i++)
    21d4:	4242           	clrw %d2
    21d6:	1439 0000 35b9 	moveb 35b9 <text_columns>,%d2
    21dc:	4240           	clrw %d0
    21de:	1039 0000 35b8 	moveb 35b8 <text_rows>,%d0
    21e4:	c4c0           	muluw %d0,%d2
    21e6:	4a82           	tstl %d2
    21e8:	6714           	beqs 21fe <xosera_mode_test+0x12c>
    21ea:	4240           	clrw %d0
        xv_setbl(data, ' ');
    21ec:	13fc 0020 00f8 	moveb #32,f80072 <MFP_UDR+0x43>
    21f2:	0072 
    for (uint16_t i = 0; i < (text_columns * text_rows); i++)
    21f4:	5240           	addqw #1,%d0
    21f6:	7200           	moveq #0,%d1
    21f8:	3200           	movew %d0,%d1
    21fa:	b481           	cmpl %d1,%d2
    21fc:	6eee           	bgts 21ec <xosera_mode_test+0x11a>
    xv_setw(wr_addr, screen_addr);
    21fe:	4242           	clrw %d2
    2200:	058a 000c      	movepw %d2,%a2@(12)
        xcls();
        dprintf("*** Xosera_gfx_test iteration: %d\n", test_count++);
    2204:	2039 0000 35b4 	movel 35b4 <_data_end>,%d0
    220a:	2600           	movel %d0,%d3
    220c:	5283           	addql #1,%d3
    220e:	23c3 0000 35b4 	movel %d3,35b4 <_data_end>
    2214:	2f00           	movel %d0,%sp@-
    2216:	4879 0000 3502 	pea 3502 <__mulsi3+0x9a>
    221c:	4e96           	jsr %fp@
    __asm__ __volatile__(
    221e:	7200           	moveq #0,%d1
    2220:	3038 040e      	movew 40e <_TIMER_100HZ+0x2>,%d0
    2224:	b078 040e      	cmpw 40e <_TIMER_100HZ+0x2>,%d0
    2228:	67fa           	beqs 2224 <xosera_mode_test+0x152>
    222a:	3038 040e      	movew 40e <_TIMER_100HZ+0x2>,%d0
    222e:	5241           	addqw #1,%d1
    2230:	b078 040e      	cmpw 40e <_TIMER_100HZ+0x2>,%d0
    2234:	67f8           	beqs 222e <xosera_mode_test+0x15c>
    uint16_t MHz = ((count * 26) + 500) / 1000;
    2236:	2601           	movel %d1,%d3
    2238:	d681           	addl %d1,%d3
    223a:	d681           	addl %d1,%d3
    223c:	2003           	movel %d3,%d0
    223e:	d083           	addl %d3,%d0
    2240:	d080           	addl %d0,%d0
    2242:	d081           	addl %d1,%d0
    2244:	d080           	addl %d0,%d0
    2246:	4878 03e8      	pea 3e8 <MFP_VECBASE+0x3a8>
    224a:	2040           	moveal %d0,%a0
    224c:	4868 01f4      	pea %a0@(500)
    2250:	4eb9 0000 33ac 	jsr 33ac <__udivsi3>
    2256:	508f           	addql #8,%sp
    2258:	2800           	movel %d0,%d4
    225a:	3a00           	movew %d0,%d5
            ((count * 3) % 10000) / 10);
    225c:	4878 2710      	pea 2710 <_ntoa_long+0x1d2>
    2260:	2f03           	movel %d3,%sp@-
    2262:	4eb9 0000 3438 	jsr 3438 <__umodsi3>
    2268:	508f           	addql #8,%sp
    dprintf("rosco_m68k: m68k CPU speed %d.%d MHz (%d.%d BogoMIPS)\n",
    226a:	4878 000a      	pea a <DUART_CSRB>
    226e:	2f00           	movel %d0,%sp@-
    2270:	4eb9 0000 33ac 	jsr 33ac <__udivsi3>
    2276:	588f           	addql #4,%sp
    2278:	2e80           	movel %d0,%sp@
    227a:	4878 2710      	pea 2710 <_ntoa_long+0x1d2>
    227e:	2f03           	movel %d3,%sp@-
    2280:	4eb9 0000 33ac 	jsr 33ac <__udivsi3>
    2286:	588f           	addql #4,%sp
    2288:	2e80           	movel %d0,%sp@
    228a:	720a           	moveq #10,%d1
    228c:	0285 0000 ffff 	andil #65535,%d5
    2292:	8ac1           	divuw %d1,%d5
    2294:	2005           	movel %d5,%d0
    2296:	4840           	swap %d0
    2298:	760f           	moveq #15,%d3
    229a:	c680           	andl %d0,%d3
    229c:	2f03           	movel %d3,%sp@-
    229e:	c8fc cccd      	muluw #-13107,%d4
    22a2:	4244           	clrw %d4
    22a4:	4844           	swap %d4
    22a6:	e64c           	lsrw #3,%d4
    22a8:	2f04           	movel %d4,%sp@-
    22aa:	4879 0000 348a 	pea 348a <__mulsi3+0x22>
    22b0:	4e96           	jsr %fp@
        rosco_m68k_CPUMHz();

        uint32_t githash   = (xv_reg_getw(githash_h) << 16) | xv_reg_getw(githash_l);
    22b2:	700c           	moveq #12,%d0
    22b4:	018a 0000      	movepw %d0,%a2@(0)
    22b8:	010a 0018      	movepw %a2@(24),%d0
    22bc:	720d           	moveq #13,%d1
    22be:	038a 0000      	movepw %d1,%a2@(0)
    22c2:	030a 0018      	movepw %a2@(24),%d1
        uint16_t width     = xv_reg_getw(vidwidth);
    22c6:	7608           	moveq #8,%d3
    22c8:	078a 0000      	movepw %d3,%a2@(0)
    22cc:	070a 0018      	movepw %a2@(24),%d3
    22d0:	3f43 004a      	movew %d3,%sp@(74)
        uint16_t height    = xv_reg_getw(vidheight);
    22d4:	7609           	moveq #9,%d3
    22d6:	078a 0000      	movepw %d3,%a2@(0)
    22da:	070a 0018      	movepw %a2@(24),%d3
    22de:	3f43 004c      	movew %d3,%sp@(76)
        uint16_t features  = xv_reg_getw(features);
    22e2:	760a           	moveq #10,%d3
    22e4:	078a 0000      	movepw %d3,%a2@(0)
    22e8:	0b0a 0018      	movepw %a2@(24),%d5
        uint16_t dispstart = xv_reg_getw(dispstart);
    22ec:	058a 0000      	movepw %d2,%a2@(0)
    22f0:	050a 0018      	movepw %a2@(24),%d2
    22f4:	3f42 004e      	movew %d2,%sp@(78)
        uint16_t dispwidth = xv_reg_getw(dispwidth);
    22f8:	0d8a 0000      	movepw %d6,%a2@(0)
    22fc:	090a 0018      	movepw %a2@(24),%d4
        uint16_t scrollxy  = xv_reg_getw(scrollxy);
    2300:	7402           	moveq #2,%d2
    2302:	058a 0000      	movepw %d2,%a2@(0)
    2306:	050a 0018      	movepw %a2@(24),%d2
        uint16_t gfxctrl   = xv_reg_getw(gfxctrl);
    230a:	7604           	moveq #4,%d3
    230c:	078a 0000      	movepw %d3,%a2@(0)
    2310:	070a 0018      	movepw %a2@(24),%d3
        uint32_t githash   = (xv_reg_getw(githash_h) << 16) | xv_reg_getw(githash_l);
    2314:	4840           	swap %d0
    2316:	4240           	clrw %d0

        dprintf("Xosera #%08x\n", githash);
    2318:	8041           	orw %d1,%d0
    231a:	2f00           	movel %d0,%sp@-
    231c:	4879 0000 3525 	pea 3525 <__mulsi3+0xbd>
    2322:	4e96           	jsr %fp@
        dprintf("Mode: %dx%d  Features:0x%04x\n", width, height, features);
    2324:	4fef 0024      	lea %sp@(36),%sp
    2328:	3f05           	movew %d5,%sp@-
    232a:	4267           	clrw %sp@-
    232c:	3f2f 0034      	movew %sp@(52),%sp@-
    2330:	4267           	clrw %sp@-
    2332:	3f2f 0036      	movew %sp@(54),%sp@-
    2336:	4267           	clrw %sp@-
    2338:	4879 0000 3533 	pea 3533 <__mulsi3+0xcb>
    233e:	4e96           	jsr %fp@
        dprintf(" dispstart:0x%04x dispwidth:0x%04x\n", dispstart, dispwidth);
    2340:	3f04           	movew %d4,%sp@-
    2342:	4267           	clrw %sp@-
    2344:	3f2f 0046      	movew %sp@(70),%sp@-
    2348:	4267           	clrw %sp@-
    234a:	4879 0000 3551 	pea 3551 <__mulsi3+0xe9>
    2350:	4e96           	jsr %fp@
        dprintf("  scrollxy:0x%04x   gfxctrl:0x%04x\n", scrollxy, gfxctrl);
    2352:	3f03           	movew %d3,%sp@-
    2354:	4267           	clrw %sp@-
    2356:	3f02           	movew %d2,%sp@-
    2358:	4267           	clrw %sp@-
    235a:	4879 0000 3575 	pea 3575 <__mulsi3+0x10d>
    2360:	4e96           	jsr %fp@

        xv_reg_setw(gfxctrl, 0x00F5);
    2362:	363c 00f5      	movew #245,%d3
    2366:	0f8a 0000      	movepw %d7,%a2@(0)
    236a:	078a 0018      	movepw %d3,%a2@(24)
    236e:	4fef 0028      	lea %sp@(40),%sp
    2372:	243c 0000 0fa0 	movel #4000,%d2
        if (checkchar())
    2378:	4e93           	jsr %a3@
    237a:	4a00           	tstb %d0
    237c:	6628           	bnes 23a6 <xosera_mode_test+0x2d4>
        if (d > 100)
    237e:	2602           	movel %d2,%d3
    2380:	7064           	moveq #100,%d0
    2382:	b082           	cmpl %d2,%d0
    2384:	6c02           	bges 2388 <xosera_mode_test+0x2b6>
    2386:	7664           	moveq #100,%d3
        delay(d);
    2388:	4878 000a      	pea a <DUART_CSRB>
    238c:	2f03           	movel %d3,%sp@-
    238e:	4e94           	jsr %a4@
    2390:	588f           	addql #4,%sp
    2392:	2e80           	movel %d0,%sp@
    2394:	4e95           	jsr %a5@
        ms -= d;
    2396:	9483           	subl %d3,%d2
    while (ms > 0)
    2398:	588f           	addql #4,%sp
    239a:	4a82           	tstl %d2
    239c:	6f00 fe00      	blew 219e <xosera_mode_test+0xcc>
        if (checkchar())
    23a0:	4e93           	jsr %a3@
    23a2:	4a00           	tstb %d0
    23a4:	67d8           	beqs 237e <xosera_mode_test+0x2ac>
        {
            break;
        }
    }

    xv_reg_setw(gfxctrl, 0x0000);
    23a6:	7004           	moveq #4,%d0
    23a8:	4241           	clrw %d1
    23aa:	207c 00f8 0060 	moveal #16253024,%a0
    23b0:	0188 0000      	movepw %d0,%a0@(0)
    23b4:	0388 0018      	movepw %d1,%a0@(24)

    while (checkchar())
    {
        readchar();
    23b8:	45f9 0000 3358 	lea 3358 <mcReadchar>,%a2
    while (checkchar())
    23be:	4e93           	jsr %a3@
    23c0:	4a00           	tstb %d0
    23c2:	6708           	beqs 23cc <xosera_mode_test+0x2fa>
        readchar();
    23c4:	4e92           	jsr %a2@
    while (checkchar())
    23c6:	4e93           	jsr %a3@
    23c8:	4a00           	tstb %d0
    23ca:	66f8           	bnes 23c4 <xosera_mode_test+0x2f2>
    }
}
    23cc:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    23d0:	508f           	addql #8,%sp
    23d2:	4e75           	rts
    dprintf("%s (%dx%d)\n", success ? "succeeded" : "FAILED", xv_reg_getw(vidwidth), xv_reg_getw(vidheight));
    23d4:	203c 0000 34c1 	movel #13505,%d0
    23da:	2f02           	movel %d2,%sp@-
    23dc:	2f01           	movel %d1,%sp@-
    23de:	2f00           	movel %d0,%sp@-
    23e0:	4879 0000 34f6 	pea 34f6 <__mulsi3+0x8e>
    23e6:	4e96           	jsr %fp@
    23e8:	4fef 0010      	lea %sp@(16),%sp
    23ec:	243c 0000 0fa0 	movel #4000,%d2
        delay(d);
    23f2:	49f9 0000 3408 	lea 3408 <__divsi3>,%a4
    23f8:	4bf9 0000 3370 	lea 3370 <mcDelaymsec10>,%a5
    23fe:	6000 fd6c      	braw 216c <xosera_mode_test+0x9a>

00002402 <xosera_init>:
#include <machine.h>

#include "xosera_api.h"

bool xosera_init(int reconfig_num)
{
    2402:	48e7 3c30      	moveml %d2-%d5/%a2-%a3,%sp@-
    2406:	282f 001c      	movel %sp@(28),%d4
    return xosera_sync();
}

bool xosera_sync()
{
    uint16_t cv = xv_getw(const_val);
    240a:	2479 0000 359a 	moveal 359a <xosera_ptr>,%a2
    2410:	7464           	moveq #100,%d2
    xv_setw(const_val, 0x55AA);
    2412:	363c 55aa      	movew #21930,%d3
    if (xv_getw(const_val) != 0x55AA)
    {
        return false;        // not detected
    }
    xv_setw(const_val, 0xAA55);
    2416:	3a3c aa55      	movew #-21931,%d5
        delay(10);
    241a:	47f9 0000 3370 	lea 3370 <mcDelaymsec10>,%a3
    uint16_t cv = xv_getw(const_val);
    2420:	030a 0004      	movepw %a2@(4),%d1
    xv_setw(const_val, 0x55AA);
    2424:	078a 0004      	movepw %d3,%a2@(4)
    if (xv_getw(const_val) != 0x55AA)
    2428:	010a 0004      	movepw %a2@(4),%d0
    242c:	0c40 55aa      	cmpiw #21930,%d0
    2430:	664a           	bnes 247c <xosera_init+0x7a>
    xv_setw(const_val, 0xAA55);
    2432:	0b8a 0004      	movepw %d5,%a2@(4)
    if (xv_getw(const_val) != 0xAA55)
    2436:	010a 0004      	movepw %a2@(4),%d0
    243a:	0c40 aa55      	cmpiw #-21931,%d0
    243e:	663c           	bnes 247c <xosera_init+0x7a>
    {
        return false;        // not detected
    }
    xv_setw(const_val, cv);
    2440:	038a 0004      	movepw %d1,%a2@(4)
    if ((reconfig_num & 3) == reconfig_num)
    2444:	7003           	moveq #3,%d0
    2446:	c084           	andl %d4,%d0
    2448:	b880           	cmpl %d0,%d4
    244a:	6752           	beqs 249e <xosera_init+0x9c>
    uint16_t cv = xv_getw(const_val);
    244c:	030a 0004      	movepw %a2@(4),%d1
    xv_setw(const_val, 0x55AA);
    2450:	303c 55aa      	movew #21930,%d0
    2454:	018a 0004      	movepw %d0,%a2@(4)
    if (xv_getw(const_val) != 0x55AA)
    2458:	010a 0004      	movepw %a2@(4),%d0
    245c:	0c40 55aa      	cmpiw #21930,%d0
    2460:	6612           	bnes 2474 <xosera_init+0x72>
    xv_setw(const_val, 0xAA55);
    2462:	303c aa55      	movew #-21931,%d0
    2466:	018a 0004      	movepw %d0,%a2@(4)
    if (xv_getw(const_val) != 0xAA55)
    246a:	010a 0004      	movepw %a2@(4),%d0
    246e:	0c40 aa55      	cmpiw #-21931,%d0
    2472:	671e           	beqs 2492 <xosera_init+0x90>
        return false;        // not detected
    2474:	4200           	clrb %d0
}
    2476:	4cdf 0c3c      	moveml %sp@+,%d2-%d5/%a2-%a3
    247a:	4e75           	rts
        delay(10);
    247c:	4878 0001      	pea 1 <ROSCO_M68K_SYSLIBS>
    2480:	4e93           	jsr %a3@
    for (int r = 0; r < 100; r++)
    2482:	5382           	subql #1,%d2
    2484:	588f           	addql #4,%sp
    2486:	6698           	bnes 2420 <xosera_init+0x1e>
    if ((reconfig_num & 3) == reconfig_num)
    2488:	7003           	moveq #3,%d0
    248a:	c084           	andl %d4,%d0
    248c:	b880           	cmpl %d0,%d4
    248e:	66bc           	bnes 244c <xosera_init+0x4a>
    2490:	600c           	bras 249e <xosera_init+0x9c>
    xv_setw(const_val, cv);
    2492:	038a 0004      	movepw %d1,%a2@(4)
    return true;
    2496:	7001           	moveq #1,%d0
}
    2498:	4cdf 0c3c      	moveml %sp@+,%d2-%d5/%a2-%a3
    249c:	4e75           	rts
        xv_setw(const_val, 0xb007);
    249e:	303c b007      	movew #-20473,%d0
    24a2:	018a 0004      	movepw %d0,%a2@(4)
        xv_setw(blit_ctrl, 0x8080 | (reconfig_num << 8));        // reboot FPGA to config_num
    24a6:	e18c           	lsll #8,%d4
    24a8:	0044 8080      	oriw #-32640,%d4
    24ac:	098a 0034      	movepw %d4,%a2@(52)
        delay(20);
    24b0:	4878 0002      	pea 2 <DUART_IMR>
    24b4:	47f9 0000 3370 	lea 3370 <mcDelaymsec10>,%a3
    24ba:	4e93           	jsr %a3@
        if (xv_getw(const_val) == 0xb007)
    24bc:	010a 0004      	movepw %a2@(4),%d0
    24c0:	588f           	addql #4,%sp
    24c2:	0c40 b007      	cmpiw #-20473,%d0
    24c6:	6742           	beqs 250a <xosera_init+0x108>
    uint16_t cv = xv_getw(const_val);
    24c8:	7464           	moveq #100,%d2
    xv_setw(const_val, 0x55AA);
    24ca:	363c 55aa      	movew #21930,%d3
    xv_setw(const_val, 0xAA55);
    24ce:	383c aa55      	movew #-21931,%d4
            delay(20);
    24d2:	4878 0002      	pea 2 <DUART_IMR>
    24d6:	4e93           	jsr %a3@
    uint16_t cv = xv_getw(const_val);
    24d8:	030a 0004      	movepw %a2@(4),%d1
    xv_setw(const_val, 0x55AA);
    24dc:	078a 0004      	movepw %d3,%a2@(4)
    if (xv_getw(const_val) != 0x55AA)
    24e0:	010a 0004      	movepw %a2@(4),%d0
    24e4:	588f           	addql #4,%sp
    24e6:	0c40 55aa      	cmpiw #21930,%d0
    24ea:	660e           	bnes 24fa <xosera_init+0xf8>
    xv_setw(const_val, 0xAA55);
    24ec:	098a 0004      	movepw %d4,%a2@(4)
    if (xv_getw(const_val) != 0xAA55)
    24f0:	010a 0004      	movepw %a2@(4),%d0
    24f4:	0c40 aa55      	cmpiw #-21931,%d0
    24f8:	6708           	beqs 2502 <xosera_init+0x100>
        for (int r = 0; r < 100; r++)
    24fa:	5382           	subql #1,%d2
    24fc:	66d4           	bnes 24d2 <xosera_init+0xd0>
    24fe:	6000 ff4c      	braw 244c <xosera_init+0x4a>
    xv_setw(const_val, cv);
    2502:	038a 0004      	movepw %d1,%a2@(4)
    return true;
    2506:	6000 ff44      	braw 244c <xosera_init+0x4a>
            printf("(reconfig failed)");
    250a:	4879 0000 359e 	pea 359e <xosera_ptr+0x4>
    2510:	4eb9 0000 32ba 	jsr 32ba <printf_>
    2516:	588f           	addql #4,%sp
    uint16_t cv = xv_getw(const_val);
    2518:	7464           	moveq #100,%d2
    xv_setw(const_val, 0x55AA);
    251a:	363c 55aa      	movew #21930,%d3
    xv_setw(const_val, 0xAA55);
    251e:	383c aa55      	movew #-21931,%d4
    2522:	60ae           	bras 24d2 <xosera_init+0xd0>

00002524 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
    2524:	222f 0004      	movel %sp@(4),%d1
    2528:	202f 000c      	movel %sp@(12),%d0
  if (idx < maxlen) {
    252c:	b0af 0010      	cmpl %sp@(16),%d0
    2530:	6408           	bccs 253a <_out_buffer+0x16>
    ((char*)buffer)[idx] = character;
    2532:	206f 0008      	moveal %sp@(8),%a0
    2536:	1181 0800      	moveb %d1,%a0@(0000000000000000,%d0:l)
  }
}
    253a:	4e75           	rts

0000253c <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    253c:	4e75           	rts

0000253e <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    253e:	4fef ffd0      	lea %sp@(-48),%sp
    2542:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    2546:	266f 0060      	moveal %sp@(96),%a3
    254a:	2a2f 0064      	movel %sp@(100),%d5
    254e:	2c2f 006c      	movel %sp@(108),%d6
    2552:	262f 0070      	movel %sp@(112),%d3
    2556:	282f 0078      	movel %sp@(120),%d4
    255a:	1f6f 0077 0037 	moveb %sp@(119),%sp@(55)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2560:	222f 0084      	movel %sp@(132),%d1
    2564:	0281 0000 0400 	andil #1024,%d1
    256a:	2f41 002e      	movel %d1,%sp@(46)
  if (!value) {
    256e:	4a83           	tstl %d3
    2570:	6600 0180      	bnew 26f2 <_ntoa_long+0x1b4>
    flags &= ~FLAGS_HASH;
    2574:	70ef           	moveq #-17,%d0
    2576:	c0af 0084      	andl %sp@(132),%d0
  if (!(flags & FLAGS_PRECISION) || value) {
    257a:	4a81           	tstl %d1
    257c:	6600 01b2      	bnew 2730 <_ntoa_long+0x1f2>
    2580:	42af 0032      	clrl %sp@(50)
    flags &= ~FLAGS_HASH;
    2584:	2f40 0084      	movel %d0,%sp@(132)
    2588:	082f 0005 0087 	btst #5,%sp@(135)
    258e:	6600 0176      	bnew 2706 <_ntoa_long+0x1c8>
    2592:	7061           	moveq #97,%d0
    2594:	4def 005c      	lea %sp@(92),%fp
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2598:	45ef 003c      	lea %sp@(60),%a2
    259c:	4bf9 0000 3438 	lea 3438 <__umodsi3>,%a5
    25a2:	7e21           	moveq #33,%d7
    25a4:	9e8e           	subl %fp,%d7
    25a6:	49f9 0000 33ac 	lea 33ac <__udivsi3>,%a4
    25ac:	1200           	moveb %d0,%d1
    25ae:	0601 fff6      	addib #-10,%d1
    25b2:	2f45 0038      	movel %d5,%sp@(56)
    25b6:	1a01           	moveb %d1,%d5
      const char digit = (char)(value % base);
    25b8:	2f04           	movel %d4,%sp@-
    25ba:	2f03           	movel %d3,%sp@-
    25bc:	4e95           	jsr %a5@
    25be:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    25c0:	7209           	moveq #9,%d1
    25c2:	b280           	cmpl %d0,%d1
    25c4:	652c           	bcss 25f2 <_ntoa_long+0xb4>
    25c6:	0600 0030      	addib #48,%d0
    25ca:	2407           	movel %d7,%d2
    25cc:	d48a           	addl %a2,%d2
    25ce:	14c0           	moveb %d0,%a2@+
      value /= base;
    25d0:	2f04           	movel %d4,%sp@-
    25d2:	2f03           	movel %d3,%sp@-
    25d4:	4e94           	jsr %a4@
    25d6:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    25d8:	b883           	cmpl %d3,%d4
    25da:	622a           	bhis 2606 <_ntoa_long+0xc8>
    25dc:	bdca           	cmpal %a2,%fp
    25de:	6700 0280      	beqw 2860 <_ntoa_long+0x322>
      value /= base;
    25e2:	2600           	movel %d0,%d3
      const char digit = (char)(value % base);
    25e4:	2f04           	movel %d4,%sp@-
    25e6:	2f03           	movel %d3,%sp@-
    25e8:	4e95           	jsr %a5@
    25ea:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    25ec:	7209           	moveq #9,%d1
    25ee:	b280           	cmpl %d0,%d1
    25f0:	64d4           	bccs 25c6 <_ntoa_long+0x88>
    25f2:	d005           	addb %d5,%d0
    25f4:	2407           	movel %d7,%d2
    25f6:	d48a           	addl %a2,%d2
    25f8:	14c0           	moveb %d0,%a2@+
      value /= base;
    25fa:	2f04           	movel %d4,%sp@-
    25fc:	2f03           	movel %d3,%sp@-
    25fe:	4e94           	jsr %a4@
    2600:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2602:	b883           	cmpl %d3,%d4
    2604:	63d6           	blss 25dc <_ntoa_long+0x9e>
    2606:	2a2f 0038      	movel %sp@(56),%d5
  if (!(flags & FLAGS_LEFT)) {
    260a:	7602           	moveq #2,%d3
    260c:	c6af 0084      	andl %sp@(132),%d3
    2610:	082f 0001 0087 	btst #1,%sp@(135)
    2616:	6700 0132      	beqw 274a <_ntoa_long+0x20c>
  if (flags & FLAGS_HASH) {
    261a:	4aaf 0032      	tstl %sp@(50)
    261e:	6700 01f2      	beqw 2812 <_ntoa_long+0x2d4>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2622:	4aaf 002e      	tstl %sp@(46)
    2626:	6600 01ca      	bnew 27f2 <_ntoa_long+0x2b4>
    262a:	4a82           	tstl %d2
    262c:	6600 01b4      	bnew 27e2 <_ntoa_long+0x2a4>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2630:	7210           	moveq #16,%d1
    2632:	b284           	cmpl %d4,%d1
    2634:	6700 02c0      	beqw 28f6 <_ntoa_long+0x3b8>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2638:	5584           	subql #2,%d4
    263a:	6700 0364      	beqw 29a0 <_ntoa_long+0x462>
      buf[len++] = '0';
    263e:	1f7c 0030 003c 	moveb #48,%sp@(60)
    2644:	7401           	moveq #1,%d2
    if (negative) {
    2646:	4a2f 0037      	tstb %sp@(55)
    264a:	6700 01e4      	beqw 2830 <_ntoa_long+0x2f2>
      buf[len++] = '-';
    264e:	1fbc 002d 283c 	moveb #45,%sp@(000000000000003c,%d2:l)
    2654:	5282           	addql #1,%d2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2656:	7003           	moveq #3,%d0
    2658:	c0af 0084      	andl %sp@(132),%d0
    265c:	6600 01c4      	bnew 2822 <_ntoa_long+0x2e4>
    for (size_t i = len; i < width; i++) {
    2660:	b4af 0080      	cmpl %sp@(128),%d2
    2664:	6400 01bc      	bccw 2822 <_ntoa_long+0x2e4>
    2668:	2e2f 0068      	movel %sp@(104),%d7
    266c:	deaf 0080      	addl %sp@(128),%d7
    2670:	9e82           	subl %d2,%d7
      buf[len++] = '0';
    2672:	246f 0068      	moveal %sp@(104),%a2
      out(' ', buffer, idx++, maxlen);
    2676:	200a           	movel %a2,%d0
    2678:	528a           	addql #1,%a2
    267a:	2f06           	movel %d6,%sp@-
    267c:	2f00           	movel %d0,%sp@-
    267e:	2f05           	movel %d5,%sp@-
    2680:	4878 0020      	pea 20 <DUART_RBA+0x2>
    2684:	4e93           	jsr %a3@
    for (size_t i = len; i < width; i++) {
    2686:	4fef 0010      	lea %sp@(16),%sp
    268a:	be8a           	cmpl %a2,%d7
    268c:	66e8           	bnes 2676 <_ntoa_long+0x138>
  while (len) {
    268e:	4a82           	tstl %d2
    2690:	6700 0236      	beqw 28c8 <_ntoa_long+0x38a>
    2694:	45f7 283c      	lea %sp@(000000000000003c,%d2:l),%a2
    2698:	de82           	addl %d2,%d7
    269a:	2807           	movel %d7,%d4
    269c:	2007           	movel %d7,%d0
    269e:	9082           	subl %d2,%d0
    out(buf[--len], buffer, idx++, maxlen);
    26a0:	5382           	subql #1,%d2
    26a2:	2f06           	movel %d6,%sp@-
    26a4:	2f00           	movel %d0,%sp@-
    26a6:	2f05           	movel %d5,%sp@-
    26a8:	1022           	moveb %a2@-,%d0
    26aa:	4880           	extw %d0
    26ac:	3040           	moveaw %d0,%a0
    26ae:	2f08           	movel %a0,%sp@-
    26b0:	4e93           	jsr %a3@
  while (len) {
    26b2:	4fef 0010      	lea %sp@(16),%sp
    26b6:	4a82           	tstl %d2
    26b8:	66e0           	bnes 269a <_ntoa_long+0x15c>
  if (flags & FLAGS_LEFT) {
    26ba:	4a83           	tstl %d3
    26bc:	6728           	beqs 26e6 <_ntoa_long+0x1a8>
    while (idx - start_idx < width) {
    26be:	2404           	movel %d4,%d2
    26c0:	94af 0068      	subl %sp@(104),%d2
    26c4:	b4af 0080      	cmpl %sp@(128),%d2
    26c8:	641c           	bccs 26e6 <_ntoa_long+0x1a8>
    26ca:	262f 0080      	movel %sp@(128),%d3
      out(' ', buffer, idx++, maxlen);
    26ce:	2f06           	movel %d6,%sp@-
    26d0:	2f04           	movel %d4,%sp@-
    26d2:	5284           	addql #1,%d4
    26d4:	2f05           	movel %d5,%sp@-
    26d6:	4878 0020      	pea 20 <DUART_RBA+0x2>
    26da:	4e93           	jsr %a3@
    while (idx - start_idx < width) {
    26dc:	5282           	addql #1,%d2
    26de:	4fef 0010      	lea %sp@(16),%sp
    26e2:	b483           	cmpl %d3,%d2
    26e4:	65e8           	bcss 26ce <_ntoa_long+0x190>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
    26e6:	2004           	movel %d4,%d0
    26e8:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    26ec:	4fef 0030      	lea %sp@(48),%sp
    26f0:	4e75           	rts
  if (flags & FLAGS_HASH) {
    26f2:	7210           	moveq #16,%d1
    26f4:	c2af 0084      	andl %sp@(132),%d1
    26f8:	2f41 0032      	movel %d1,%sp@(50)
    26fc:	082f 0005 0087 	btst #5,%sp@(135)
    2702:	6700 fe8e      	beqw 2592 <_ntoa_long+0x54>
    2706:	7041           	moveq #65,%d0
    2708:	4def 005c      	lea %sp@(92),%fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    270c:	45ef 003c      	lea %sp@(60),%a2
    2710:	4bf9 0000 3438 	lea 3438 <__umodsi3>,%a5
    2716:	7e21           	moveq #33,%d7
    2718:	9e8e           	subl %fp,%d7
    271a:	49f9 0000 33ac 	lea 33ac <__udivsi3>,%a4
    2720:	1200           	moveb %d0,%d1
    2722:	0601 fff6      	addib #-10,%d1
    2726:	2f45 0038      	movel %d5,%sp@(56)
    272a:	1a01           	moveb %d1,%d5
    272c:	6000 fe8a      	braw 25b8 <_ntoa_long+0x7a>
  if (!(flags & FLAGS_LEFT)) {
    2730:	7602           	moveq #2,%d3
    2732:	c6af 0084      	andl %sp@(132),%d3
    2736:	082f 0001 0087 	btst #1,%sp@(135)
    273c:	6600 0174      	bnew 28b2 <_ntoa_long+0x374>
    2740:	2f40 0084      	movel %d0,%sp@(132)
    2744:	42af 0032      	clrl %sp@(50)
  size_t len = 0U;
    2748:	7400           	moveq #0,%d2
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    274a:	7601           	moveq #1,%d3
    274c:	c6af 0084      	andl %sp@(132),%d3
    2750:	4aaf 0080      	tstl %sp@(128)
    2754:	6700 0124      	beqw 287a <_ntoa_long+0x33c>
    2758:	4a83           	tstl %d3
    275a:	6700 013a      	beqw 2896 <_ntoa_long+0x358>
    275e:	4a2f 0037      	tstb %sp@(55)
    2762:	6600 01b2      	bnew 2916 <_ntoa_long+0x3d8>
    2766:	700c           	moveq #12,%d0
    2768:	c0af 0084      	andl %sp@(132),%d0
    276c:	6600 01a8      	bnew 2916 <_ntoa_long+0x3d8>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2770:	b4af 007c      	cmpl %sp@(124),%d2
    2774:	6426           	bccs 279c <_ntoa_long+0x25e>
    2776:	7220           	moveq #32,%d1
    2778:	b282           	cmpl %d2,%d1
    277a:	6700 01a2      	beqw 291e <_ntoa_long+0x3e0>
    277e:	41f7 283c      	lea %sp@(000000000000003c,%d2:l),%a0
    2782:	202f 007c      	movel %sp@(124),%d0
      buf[len++] = '0';
    2786:	5282           	addql #1,%d2
    2788:	10fc 0030      	moveb #48,%a0@+
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    278c:	b480           	cmpl %d0,%d2
    278e:	6406           	bccs 2796 <_ntoa_long+0x258>
    2790:	7220           	moveq #32,%d1
    2792:	b282           	cmpl %d2,%d1
    2794:	66f0           	bnes 2786 <_ntoa_long+0x248>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2796:	4a83           	tstl %d3
    2798:	6700 fe80      	beqw 261a <_ntoa_long+0xdc>
    279c:	b4af 0080      	cmpl %sp@(128),%d2
    27a0:	6400 0184      	bccw 2926 <_ntoa_long+0x3e8>
    27a4:	701f           	moveq #31,%d0
    27a6:	b082           	cmpl %d2,%d0
    27a8:	6500 01f0      	bcsw 299a <_ntoa_long+0x45c>
    27ac:	43ef 003c      	lea %sp@(60),%a1
    27b0:	41f1 2800      	lea %a1@(0000000000000000,%d2:l),%a0
    27b4:	222f 0080      	movel %sp@(128),%d1
    27b8:	d289           	addl %a1,%d1
    27ba:	4def 005c      	lea %sp@(92),%fp
    27be:	7001           	moveq #1,%d0
    27c0:	9089           	subl %a1,%d0
      buf[len++] = '0';
    27c2:	2400           	movel %d0,%d2
    27c4:	d488           	addl %a0,%d2
    27c6:	10fc 0030      	moveb #48,%a0@+
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27ca:	b288           	cmpl %a0,%d1
    27cc:	6700 0158      	beqw 2926 <_ntoa_long+0x3e8>
    27d0:	bdc8           	cmpal %a0,%fp
    27d2:	66ee           	bnes 27c2 <_ntoa_long+0x284>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    27d4:	7600           	moveq #0,%d3
  if (flags & FLAGS_HASH) {
    27d6:	4aaf 0032      	tstl %sp@(50)
    27da:	673e           	beqs 281a <_ntoa_long+0x2dc>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    27dc:	4aaf 002e      	tstl %sp@(46)
    27e0:	6610           	bnes 27f2 <_ntoa_long+0x2b4>
    27e2:	b4af 007c      	cmpl %sp@(124),%d2
    27e6:	6700 00fc      	beqw 28e4 <_ntoa_long+0x3a6>
    27ea:	b4af 0080      	cmpl %sp@(128),%d2
    27ee:	6700 00f4      	beqw 28e4 <_ntoa_long+0x3a6>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27f2:	7210           	moveq #16,%d1
    27f4:	b284           	cmpl %d4,%d1
    27f6:	6700 0134      	beqw 292c <_ntoa_long+0x3ee>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27fa:	5584           	subql #2,%d4
    27fc:	6700 00d0      	beqw 28ce <_ntoa_long+0x390>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2800:	7220           	moveq #32,%d1
    2802:	b282           	cmpl %d2,%d1
    2804:	6714           	beqs 281a <_ntoa_long+0x2dc>
    2806:	2002           	movel %d2,%d0
      buf[len++] = '0';
    2808:	2400           	movel %d0,%d2
    280a:	5282           	addql #1,%d2
    280c:	1fbc 0030 083c 	moveb #48,%sp@(000000000000003c,%d0:l)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2812:	7020           	moveq #32,%d0
    2814:	b082           	cmpl %d2,%d0
    2816:	6600 fe2e      	bnew 2646 <_ntoa_long+0x108>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    281a:	7003           	moveq #3,%d0
    281c:	c0af 0084      	andl %sp@(132),%d0
    2820:	672a           	beqs 284c <_ntoa_long+0x30e>
    2822:	2e2f 0068      	movel %sp@(104),%d7
    2826:	45f7 283c      	lea %sp@(000000000000003c,%d2:l),%a2
    282a:	de82           	addl %d2,%d7
    282c:	6000 fe6c      	braw 269a <_ntoa_long+0x15c>
    else if (flags & FLAGS_PLUS) {
    2830:	082f 0002 0087 	btst #2,%sp@(135)
    2836:	6600 0084      	bnew 28bc <_ntoa_long+0x37e>
    else if (flags & FLAGS_SPACE) {
    283a:	082f 0003 0087 	btst #3,%sp@(135)
    2840:	6600 010a      	bnew 294c <_ntoa_long+0x40e>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2844:	7003           	moveq #3,%d0
    2846:	c0af 0084      	andl %sp@(132),%d0
    284a:	6608           	bnes 2854 <_ntoa_long+0x316>
    for (size_t i = len; i < width; i++) {
    284c:	b4af 0080      	cmpl %sp@(128),%d2
    2850:	6500 fe16      	bcsw 2668 <_ntoa_long+0x12a>
    2854:	2e2f 0068      	movel %sp@(104),%d7
  while (len) {
    2858:	4a82           	tstl %d2
    285a:	6600 fe38      	bnew 2694 <_ntoa_long+0x156>
    285e:	6068           	bras 28c8 <_ntoa_long+0x38a>
    2860:	2a2f 0038      	movel %sp@(56),%d5
    2864:	7420           	moveq #32,%d2
  if (!(flags & FLAGS_LEFT)) {
    2866:	7602           	moveq #2,%d3
    2868:	c6af 0084      	andl %sp@(132),%d3
    286c:	082f 0001 0087 	btst #1,%sp@(135)
    2872:	6600 fda6      	bnew 261a <_ntoa_long+0xdc>
    2876:	6000 fed2      	braw 274a <_ntoa_long+0x20c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    287a:	b4af 007c      	cmpl %sp@(124),%d2
    287e:	6400 ff16      	bccw 2796 <_ntoa_long+0x258>
    2882:	7020           	moveq #32,%d0
    2884:	b082           	cmpl %d2,%d0
    2886:	6700 ff0e      	beqw 2796 <_ntoa_long+0x258>
    288a:	41f7 283c      	lea %sp@(000000000000003c,%d2:l),%a0
    288e:	202f 007c      	movel %sp@(124),%d0
    2892:	6000 fef2      	braw 2786 <_ntoa_long+0x248>
    2896:	b4af 007c      	cmpl %sp@(124),%d2
    289a:	6400 fd7e      	bccw 261a <_ntoa_long+0xdc>
    289e:	7020           	moveq #32,%d0
    28a0:	b082           	cmpl %d2,%d0
    28a2:	6700 fd76      	beqw 261a <_ntoa_long+0xdc>
    28a6:	41f7 283c      	lea %sp@(000000000000003c,%d2:l),%a0
    28aa:	202f 007c      	movel %sp@(124),%d0
    28ae:	6000 fed6      	braw 2786 <_ntoa_long+0x248>
  if (!(flags & FLAGS_LEFT)) {
    28b2:	2f40 0084      	movel %d0,%sp@(132)
  size_t len = 0U;
    28b6:	7400           	moveq #0,%d2
    28b8:	6000 fd8c      	braw 2646 <_ntoa_long+0x108>
      buf[len++] = '+';  // ignore the space if the '+' exists
    28bc:	1fbc 002b 283c 	moveb #43,%sp@(000000000000003c,%d2:l)
    28c2:	5282           	addql #1,%d2
    28c4:	6000 fd90      	braw 2656 <_ntoa_long+0x118>
  while (len) {
    28c8:	2807           	movel %d7,%d4
    28ca:	6000 fdee      	braw 26ba <_ntoa_long+0x17c>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28ce:	7020           	moveq #32,%d0
    28d0:	b082           	cmpl %d2,%d0
    28d2:	6700 ff46      	beqw 281a <_ntoa_long+0x2dc>
      buf[len++] = 'b';
    28d6:	41f7 283c      	lea %sp@(000000000000003c,%d2:l),%a0
    28da:	5282           	addql #1,%d2
    28dc:	10bc 0062      	moveb #98,%a0@
    28e0:	6000 ff1e      	braw 2800 <_ntoa_long+0x2c2>
      len--;
    28e4:	2002           	movel %d2,%d0
    28e6:	5380           	subql #1,%d0
      if (len && (base == 16U)) {
    28e8:	7201           	moveq #1,%d1
    28ea:	b282           	cmpl %d2,%d1
    28ec:	667e           	bnes 296c <_ntoa_long+0x42e>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28ee:	7010           	moveq #16,%d0
    28f0:	b084           	cmpl %d4,%d0
    28f2:	6600 fd44      	bnew 2638 <_ntoa_long+0xfa>
    28f6:	082f 0005 0087 	btst #5,%sp@(135)
    28fc:	6600 0086      	bnew 2984 <_ntoa_long+0x446>
      buf[len++] = 'x';
    2900:	1f7c 0078 003c 	moveb #120,%sp@(60)
    2906:	7001           	moveq #1,%d0
      buf[len++] = '0';
    2908:	2400           	movel %d0,%d2
    290a:	5282           	addql #1,%d2
    290c:	1fbc 0030 083c 	moveb #48,%sp@(000000000000003c,%d0:l)
    2912:	6000 fefe      	braw 2812 <_ntoa_long+0x2d4>
      width--;
    2916:	53af 0080      	subql #1,%sp@(128)
    291a:	6000 fe54      	braw 2770 <_ntoa_long+0x232>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    291e:	7020           	moveq #32,%d0
    2920:	b0af 0080      	cmpl %sp@(128),%d0
    2924:	6574           	bcss 299a <_ntoa_long+0x45c>
    2926:	7600           	moveq #0,%d3
    2928:	6000 fcf0      	braw 261a <_ntoa_long+0xdc>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    292c:	7020           	moveq #32,%d0
    292e:	082f 0005 0087 	btst #5,%sp@(135)
    2934:	6722           	beqs 2958 <_ntoa_long+0x41a>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2936:	b082           	cmpl %d2,%d0
    2938:	6700 fee0      	beqw 281a <_ntoa_long+0x2dc>
    293c:	2202           	movel %d2,%d1
      buf[len++] = 'X';
    293e:	2401           	movel %d1,%d2
    2940:	5282           	addql #1,%d2
    2942:	1fbc 0058 183c 	moveb #88,%sp@(000000000000003c,%d1:l)
    2948:	6000 feb6      	braw 2800 <_ntoa_long+0x2c2>
      buf[len++] = ' ';
    294c:	1fbc 0020 283c 	moveb #32,%sp@(000000000000003c,%d2:l)
    2952:	5282           	addql #1,%d2
    2954:	6000 fd00      	braw 2656 <_ntoa_long+0x118>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2958:	b082           	cmpl %d2,%d0
    295a:	6700 febe      	beqw 281a <_ntoa_long+0x2dc>
      buf[len++] = 'x';
    295e:	41f7 283c      	lea %sp@(000000000000003c,%d2:l),%a0
    2962:	5282           	addql #1,%d2
    2964:	10bc 0078      	moveb #120,%a0@
    2968:	6000 fe96      	braw 2800 <_ntoa_long+0x2c2>
      if (len && (base == 16U)) {
    296c:	7210           	moveq #16,%d1
    296e:	b284           	cmpl %d4,%d1
    2970:	6744           	beqs 29b6 <_ntoa_long+0x478>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2972:	5584           	subql #2,%d4
    2974:	6600 fe92      	bnew 2808 <_ntoa_long+0x2ca>
      buf[len++] = 'b';
    2978:	41f7 083c      	lea %sp@(000000000000003c,%d0:l),%a0
    297c:	10bc 0062      	moveb #98,%a0@
    2980:	6000 fe7e      	braw 2800 <_ntoa_long+0x2c2>
      buf[len++] = 'X';
    2984:	1f7c 0058 003c 	moveb #88,%sp@(60)
    298a:	7001           	moveq #1,%d0
      buf[len++] = '0';
    298c:	2400           	movel %d0,%d2
    298e:	5282           	addql #1,%d2
    2990:	1fbc 0030 083c 	moveb #48,%sp@(000000000000003c,%d0:l)
    2996:	6000 fe7a      	braw 2812 <_ntoa_long+0x2d4>
    299a:	7420           	moveq #32,%d2
    299c:	6000 fe36      	braw 27d4 <_ntoa_long+0x296>
      buf[len++] = 'b';
    29a0:	1f7c 0062 003c 	moveb #98,%sp@(60)
    29a6:	7001           	moveq #1,%d0
      buf[len++] = '0';
    29a8:	2400           	movel %d0,%d2
    29aa:	5282           	addql #1,%d2
    29ac:	1fbc 0030 083c 	moveb #48,%sp@(000000000000003c,%d0:l)
    29b2:	6000 fe5e      	braw 2812 <_ntoa_long+0x2d4>
        len--;
    29b6:	2202           	movel %d2,%d1
    29b8:	5581           	subql #2,%d1
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    29ba:	082f 0005 0087 	btst #5,%sp@(135)
    29c0:	6600 ff7c      	bnew 293e <_ntoa_long+0x400>
      buf[len++] = 'x';
    29c4:	41f7 183c      	lea %sp@(000000000000003c,%d1:l),%a0
    29c8:	2400           	movel %d0,%d2
    29ca:	10bc 0078      	moveb #120,%a0@
    29ce:	6000 fe30      	braw 2800 <_ntoa_long+0x2c2>

000029d2 <_out_char>:
{
    29d2:	202f 0004      	movel %sp@(4),%d0
  if (character) {
    29d6:	4a00           	tstb %d0
    29d8:	6602           	bnes 29dc <_out_char+0xa>
}
    29da:	4e75           	rts
    _putchar(character);
    29dc:	4880           	extw %d0
    29de:	3040           	moveaw %d0,%a0
    29e0:	2f48 0004      	movel %a0,%sp@(4)
    29e4:	4ef9 0000 3304 	jmp 3304 <_putchar>

000029ea <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    29ea:	518f           	subql #8,%sp
    29ec:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    29f0:	2a6f 0038      	moveal %sp@(56),%a5
    29f4:	262f 003c      	movel %sp@(60),%d3
    29f8:	242f 0040      	movel %sp@(64),%d2
    29fc:	2c6f 0044      	moveal %sp@(68),%fp
    2a00:	282f 0048      	movel %sp@(72),%d4
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    2a04:	4a83           	tstl %d3
    2a06:	6700 02d2      	beqw 2cda <_vsnprintf+0x2f0>
    // use null output function
    out = _out_null;
  }

  while (*format)
    2a0a:	1016           	moveb %fp@,%d0
    2a0c:	95ca           	subal %a2,%a2
    2a0e:	4a00           	tstb %d0
    2a10:	6700 04e8      	beqw 2efa <_vsnprintf+0x510>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
      // no
      out(*format, buffer, idx++, maxlen);
      format++;
    2a14:	528e           	addql #1,%fp
    if (*format != '%') {
    2a16:	0c00 0025      	cmpib #37,%d0
    2a1a:	673e           	beqs 2a5a <_vsnprintf+0x70>
      out(*format, buffer, idx++, maxlen);
    2a1c:	2a0a           	movel %a2,%d5
    2a1e:	5285           	addql #1,%d5
    2a20:	2f02           	movel %d2,%sp@-
    2a22:	2f0a           	movel %a2,%sp@-
    2a24:	2f03           	movel %d3,%sp@-
    2a26:	4880           	extw %d0
    2a28:	3040           	moveaw %d0,%a0
    2a2a:	2f08           	movel %a0,%sp@-
    2a2c:	4e95           	jsr %a5@
      continue;
    2a2e:	4fef 0010      	lea %sp@(16),%sp
      out(*format, buffer, idx++, maxlen);
    2a32:	2445           	moveal %d5,%a2
  while (*format)
    2a34:	1016           	moveb %fp@,%d0
    2a36:	66dc           	bnes 2a14 <_vsnprintf+0x2a>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    2a38:	280a           	movel %a2,%d4
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2a3a:	b48a           	cmpl %a2,%d2
    2a3c:	6204           	bhis 2a42 <_vsnprintf+0x58>
    2a3e:	2442           	moveal %d2,%a2
    2a40:	538a           	subql #1,%a2
    2a42:	2f02           	movel %d2,%sp@-
    2a44:	2f0a           	movel %a2,%sp@-
    2a46:	2f03           	movel %d3,%sp@-
    2a48:	42a7           	clrl %sp@-
    2a4a:	4e95           	jsr %a5@
  return (int)idx;
    2a4c:	4fef 0010      	lea %sp@(16),%sp
}
    2a50:	2004           	movel %d4,%d0
    2a52:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2a56:	508f           	addql #8,%sp
    2a58:	4e75           	rts
    flags = 0U;
    2a5a:	7000           	moveq #0,%d0
      switch (*format) {
    2a5c:	204e           	moveal %fp,%a0
    2a5e:	1218           	moveb %a0@+,%d1
      format++;
    2a60:	2e08           	movel %a0,%d7
    2a62:	1a01           	moveb %d1,%d5
    2a64:	0605 ffe0      	addib #-32,%d5
    2a68:	0c05 0010      	cmpib #16,%d5
    2a6c:	6232           	bhis 2aa0 <_vsnprintf+0xb6>
    2a6e:	0285 0000 00ff 	andil #255,%d5
    2a74:	da85           	addl %d5,%d5
    2a76:	327b 5806      	moveaw %pc@(2a7e <_vsnprintf+0x94>,%d5:l),%a1
    2a7a:	4efb 9002      	jmp %pc@(2a7e <_vsnprintf+0x94>,%a1:w)
    2a7e:	015c           	bchg %d0,%a4@+
    2a80:	0022 0022      	orib #34,%a2@-
    2a84:	0152           	bchg %d0,%a2@
    2a86:	0022 0022      	orib #34,%a2@-
    2a8a:	0022 0022      	orib #34,%a2@-
    2a8e:	0022 0022      	orib #34,%a2@-
    2a92:	0022 0148      	orib #72,%a2@-
    2a96:	0022 013e      	orib #62,%a2@-
    2a9a:	0022 0022      	orib #34,%a2@-
    2a9e:	0134 1a01      	btst %d0,%a4@(0000000000000001,%d1:l:2)
  return (ch >= '0') && (ch <= '9');
    2aa2:	0605 ffd0      	addib #-48,%d5
    if (_is_digit(*format)) {
    2aa6:	0c05 0009      	cmpib #9,%d5
    2aaa:	6300 01be      	blsw 2c6a <_vsnprintf+0x280>
    else if (*format == '*') {
    2aae:	0c01 002a      	cmpib #42,%d1
    2ab2:	6700 020a      	beqw 2cbe <_vsnprintf+0x2d4>
    width = 0U;
    2ab6:	97cb           	subal %a3,%a3
    if (*format == '.') {
    2ab8:	0c01 002e      	cmpib #46,%d1
    2abc:	6700 016a      	beqw 2c28 <_vsnprintf+0x23e>
    precision = 0U;
    2ac0:	99cc           	subal %a4,%a4
    switch (*format) {
    2ac2:	0c01 006c      	cmpib #108,%d1
    2ac6:	6700 018c      	beqw 2c54 <_vsnprintf+0x26a>
    2aca:	0c01 006c      	cmpib #108,%d1
    2ace:	6e00 0114      	bgtw 2be4 <_vsnprintf+0x1fa>
    2ad2:	0c01 0068      	cmpib #104,%d1
    2ad6:	6700 03ae      	beqw 2e86 <_vsnprintf+0x49c>
    2ada:	0c01 006a      	cmpib #106,%d1
    2ade:	6600 0716      	bnew 31f6 <_vsnprintf+0x80c>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2ae2:	0040 0200      	oriw #512,%d0
    switch (*format) {
    2ae6:	122e 0001      	moveb %fp@(1),%d1
        format++;
    2aea:	5287           	addql #1,%d7
    switch (*format) {
    2aec:	1a01           	moveb %d1,%d5
    2aee:	0605 ffdb      	addib #-37,%d5
    2af2:	0c05 0053      	cmpib #83,%d5
    2af6:	6200 010c      	bhiw 2c04 <_vsnprintf+0x21a>
    2afa:	0285 0000 00ff 	andil #255,%d5
    2b00:	da85           	addl %d5,%d5
    2b02:	307b 5806      	moveaw %pc@(2b0a <_vsnprintf+0x120>,%d5:l),%a0
    2b06:	4efb 8002      	jmp %pc@(2b0a <_vsnprintf+0x120>,%a0:w)
    2b0a:	05f2 00fa      	bset %d2,%a2@(fffffffffffffffa,%d0:w)
    2b0e:	00fa           	.short 0x00fa
    2b10:	00fa           	.short 0x00fa
    2b12:	00fa           	.short 0x00fa
    2b14:	00fa           	.short 0x00fa
    2b16:	00fa           	.short 0x00fa
    2b18:	00fa           	.short 0x00fa
    2b1a:	00fa           	.short 0x00fa
    2b1c:	00fa           	.short 0x00fa
    2b1e:	00fa           	.short 0x00fa
    2b20:	00fa           	.short 0x00fa
    2b22:	00fa           	.short 0x00fa
    2b24:	00fa           	.short 0x00fa
    2b26:	00fa           	.short 0x00fa
    2b28:	00fa           	.short 0x00fa
    2b2a:	00fa           	.short 0x00fa
    2b2c:	00fa           	.short 0x00fa
    2b2e:	00fa           	.short 0x00fa
    2b30:	00fa           	.short 0x00fa
    2b32:	00fa           	.short 0x00fa
    2b34:	00fa           	.short 0x00fa
    2b36:	00fa           	.short 0x00fa
    2b38:	00fa           	.short 0x00fa
    2b3a:	00fa           	.short 0x00fa
    2b3c:	00fa           	.short 0x00fa
    2b3e:	00fa           	.short 0x00fa
    2b40:	00fa           	.short 0x00fa
    2b42:	00fa           	.short 0x00fa
    2b44:	00fa           	.short 0x00fa
    2b46:	00fa           	.short 0x00fa
    2b48:	00fa           	.short 0x00fa
    2b4a:	00fa           	.short 0x00fa
    2b4c:	00fa           	.short 0x00fa
    2b4e:	00fa           	.short 0x00fa
    2b50:	00fa           	.short 0x00fa
    2b52:	00fa           	.short 0x00fa
    2b54:	00fa           	.short 0x00fa
    2b56:	00fa           	.short 0x00fa
    2b58:	00fa           	.short 0x00fa
    2b5a:	00fa           	.short 0x00fa
    2b5c:	00fa           	.short 0x00fa
    2b5e:	00fa           	.short 0x00fa
    2b60:	00fa           	.short 0x00fa
    2b62:	00fa           	.short 0x00fa
    2b64:	00fa           	.short 0x00fa
    2b66:	00fa           	.short 0x00fa
    2b68:	00fa           	.short 0x00fa
    2b6a:	00fa           	.short 0x00fa
    2b6c:	00fa           	.short 0x00fa
    2b6e:	00fa           	.short 0x00fa
    2b70:	01fe           	.short 0x01fe
    2b72:	00fa           	.short 0x00fa
    2b74:	00fa           	.short 0x00fa
    2b76:	00fa           	.short 0x00fa
    2b78:	00fa           	.short 0x00fa
    2b7a:	00fa           	.short 0x00fa
    2b7c:	00fa           	.short 0x00fa
    2b7e:	00fa           	.short 0x00fa
    2b80:	00fa           	.short 0x00fa
    2b82:	00fa           	.short 0x00fa
    2b84:	01fe           	.short 0x01fe
    2b86:	059c           	bclr %d2,%a4@+
    2b88:	01fe           	.short 0x01fe
    2b8a:	00fa           	.short 0x00fa
    2b8c:	00fa           	.short 0x00fa
    2b8e:	00fa           	.short 0x00fa
    2b90:	00fa           	.short 0x00fa
    2b92:	01fe           	.short 0x01fe
    2b94:	00fa           	.short 0x00fa
    2b96:	00fa           	.short 0x00fa
    2b98:	00fa           	.short 0x00fa
    2b9a:	00fa           	.short 0x00fa
    2b9c:	00fa           	.short 0x00fa
    2b9e:	01fe           	.short 0x01fe
    2ba0:	0344           	bchg %d1,%d4
    2ba2:	00fa           	.short 0x00fa
    2ba4:	00fa           	.short 0x00fa
    2ba6:	02a0 00fa 01fe 	andil #16384510,%a0@-
    2bac:	00fa           	.short 0x00fa
    2bae:	00fa           	.short 0x00fa
    2bb0:	01fe           	.short 0x01fe
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2bb2:	7201           	moveq #1,%d1
    2bb4:	8081           	orl %d1,%d0
      format++;
    2bb6:	2c48           	moveal %a0,%fp
    2bb8:	6000 fea2      	braw 2a5c <_vsnprintf+0x72>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2bbc:	7a02           	moveq #2,%d5
    2bbe:	8085           	orl %d5,%d0
      format++;
    2bc0:	2c48           	moveal %a0,%fp
    2bc2:	6000 fe98      	braw 2a5c <_vsnprintf+0x72>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2bc6:	7c04           	moveq #4,%d6
    2bc8:	8086           	orl %d6,%d0
      format++;
    2bca:	2c48           	moveal %a0,%fp
    2bcc:	6000 fe8e      	braw 2a5c <_vsnprintf+0x72>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    2bd0:	7a10           	moveq #16,%d5
    2bd2:	8085           	orl %d5,%d0
      format++;
    2bd4:	2c48           	moveal %a0,%fp
    2bd6:	6000 fe84      	braw 2a5c <_vsnprintf+0x72>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2bda:	7208           	moveq #8,%d1
    2bdc:	8081           	orl %d1,%d0
      format++;
    2bde:	2c48           	moveal %a0,%fp
    2be0:	6000 fe7a      	braw 2a5c <_vsnprintf+0x72>
    switch (*format) {
    2be4:	0c01 007a      	cmpib #122,%d1
    2be8:	6600 ff02      	bnew 2aec <_vsnprintf+0x102>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2bec:	0040 0100      	oriw #256,%d0
    switch (*format) {
    2bf0:	122e 0001      	moveb %fp@(1),%d1
        format++;
    2bf4:	5287           	addql #1,%d7
    switch (*format) {
    2bf6:	1a01           	moveb %d1,%d5
    2bf8:	0605 ffdb      	addib #-37,%d5
    2bfc:	0c05 0053      	cmpib #83,%d5
    2c00:	6300 fef8      	blsw 2afa <_vsnprintf+0x110>
        out(*format, buffer, idx++, maxlen);
    2c04:	2a0a           	movel %a2,%d5
    2c06:	5285           	addql #1,%d5
    2c08:	2f02           	movel %d2,%sp@-
    2c0a:	2f0a           	movel %a2,%sp@-
    2c0c:	2f03           	movel %d3,%sp@-
    switch (*format) {
    2c0e:	4881           	extw %d1
        out(*format, buffer, idx++, maxlen);
    2c10:	3041           	moveaw %d1,%a0
    2c12:	2f08           	movel %a0,%sp@-
    2c14:	4e95           	jsr %a5@
        break;
    2c16:	4fef 0010      	lea %sp@(16),%sp
    2c1a:	2c47           	moveal %d7,%fp
        out(*format, buffer, idx++, maxlen);
    2c1c:	2445           	moveal %d5,%a2
  while (*format)
    2c1e:	1016           	moveb %fp@,%d0
    2c20:	6600 fdf2      	bnew 2a14 <_vsnprintf+0x2a>
    2c24:	6000 fe12      	braw 2a38 <_vsnprintf+0x4e>
      flags |= FLAGS_PRECISION;
    2c28:	0040 0400      	oriw #1024,%d0
      if (_is_digit(*format)) {
    2c2c:	122e 0001      	moveb %fp@(1),%d1
  return (ch >= '0') && (ch <= '9');
    2c30:	1a01           	moveb %d1,%d5
    2c32:	0605 ffd0      	addib #-48,%d5
      if (_is_digit(*format)) {
    2c36:	0c05 0009      	cmpib #9,%d5
    2c3a:	6300 0262      	blsw 2e9e <_vsnprintf+0x4b4>
      else if (*format == '*') {
    2c3e:	0c01 002a      	cmpib #42,%d1
    2c42:	6700 029a      	beqw 2ede <_vsnprintf+0x4f4>
      format++;
    2c46:	2c47           	moveal %d7,%fp
        format++;
    2c48:	5287           	addql #1,%d7
    precision = 0U;
    2c4a:	99cc           	subal %a4,%a4
    switch (*format) {
    2c4c:	0c01 006c      	cmpib #108,%d1
    2c50:	6600 fe78      	bnew 2aca <_vsnprintf+0xe0>
        if (*format == 'l') {
    2c54:	122e 0001      	moveb %fp@(1),%d1
    2c58:	0c01 006c      	cmpib #108,%d1
    2c5c:	6700 03a6      	beqw 3004 <_vsnprintf+0x61a>
        flags |= FLAGS_LONG;
    2c60:	0040 0100      	oriw #256,%d0
        format++;
    2c64:	5287           	addql #1,%d7
    2c66:	6000 fe84      	braw 2aec <_vsnprintf+0x102>
  unsigned int i = 0U;
    2c6a:	97cb           	subal %a3,%a3
    2c6c:	284b           	moveal %a3,%a4
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2c6e:	224e           	moveal %fp,%a1
    2c70:	2c48           	moveal %a0,%fp
    2c72:	47f4 c800      	lea %a4@(0000000000000000,%a4:l),%a3
    2c76:	d7cb           	addal %a3,%a3
    2c78:	d7cc           	addal %a4,%a3
    2c7a:	d7cb           	addal %a3,%a3
    2c7c:	4881           	extw %d1
    2c7e:	49f3 10d0      	lea %a3@(ffffffffffffffd0,%d1:w),%a4
  while (_is_digit(**str)) {
    2c82:	1210           	moveb %a0@,%d1
  return (ch >= '0') && (ch <= '9');
    2c84:	1a01           	moveb %d1,%d5
    2c86:	0605 ffd0      	addib #-48,%d5
  while (_is_digit(**str)) {
    2c8a:	0c05 0009      	cmpib #9,%d5
    2c8e:	6224           	bhis 2cb4 <_vsnprintf+0x2ca>
    2c90:	5288           	addql #1,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2c92:	224e           	moveal %fp,%a1
    2c94:	2c48           	moveal %a0,%fp
    2c96:	47f4 c800      	lea %a4@(0000000000000000,%a4:l),%a3
    2c9a:	d7cb           	addal %a3,%a3
    2c9c:	d7cc           	addal %a4,%a3
    2c9e:	d7cb           	addal %a3,%a3
    2ca0:	4881           	extw %d1
    2ca2:	49f3 10d0      	lea %a3@(ffffffffffffffd0,%d1:w),%a4
  while (_is_digit(**str)) {
    2ca6:	1210           	moveb %a0@,%d1
  return (ch >= '0') && (ch <= '9');
    2ca8:	1a01           	moveb %d1,%d5
    2caa:	0605 ffd0      	addib #-48,%d5
  while (_is_digit(**str)) {
    2cae:	0c05 0009      	cmpib #9,%d5
    2cb2:	63dc           	blss 2c90 <_vsnprintf+0x2a6>
      format++;
    2cb4:	264c           	moveal %a4,%a3
    2cb6:	2e09           	movel %a1,%d7
    2cb8:	5487           	addql #2,%d7
    2cba:	6000 fdfc      	braw 2ab8 <_vsnprintf+0xce>
      const int w = va_arg(va, int);
    2cbe:	2244           	moveal %d4,%a1
    2cc0:	2659           	moveal %a1@+,%a3
    2cc2:	2809           	movel %a1,%d4
      if (w < 0) {
    2cc4:	b6fc 0000      	cmpaw #0,%a3
    2cc8:	6d24           	blts 2cee <_vsnprintf+0x304>
    if (*format == '.') {
    2cca:	122e 0001      	moveb %fp@(1),%d1
      format++;
    2cce:	43ee 0002      	lea %fp@(2),%a1
      format++;
    2cd2:	2c48           	moveal %a0,%fp
      format++;
    2cd4:	2e09           	movel %a1,%d7
    2cd6:	6000 fde0      	braw 2ab8 <_vsnprintf+0xce>
    out = _out_null;
    2cda:	4bf9 0000 253c 	lea 253c <_out_null>,%a5
  while (*format)
    2ce0:	1016           	moveb %fp@,%d0
    2ce2:	95ca           	subal %a2,%a2
    2ce4:	4a00           	tstb %d0
    2ce6:	6600 fd2c      	bnew 2a14 <_vsnprintf+0x2a>
    2cea:	6000 020e      	braw 2efa <_vsnprintf+0x510>
        flags |= FLAGS_LEFT;    // reverse padding
    2cee:	7202           	moveq #2,%d1
    2cf0:	8081           	orl %d1,%d0
        width = (unsigned int)-w;
    2cf2:	2a0b           	movel %a3,%d5
    2cf4:	4485           	negl %d5
    2cf6:	2645           	moveal %d5,%a3
    if (*format == '.') {
    2cf8:	122e 0001      	moveb %fp@(1),%d1
      format++;
    2cfc:	43ee 0002      	lea %fp@(2),%a1
      format++;
    2d00:	2c48           	moveal %a0,%fp
      format++;
    2d02:	2e09           	movel %a1,%d7
    2d04:	6000 fdb2      	braw 2ab8 <_vsnprintf+0xce>
        if (*format == 'x' || *format == 'X') {
    2d08:	0c01 0078      	cmpib #120,%d1
    2d0c:	6700 047e      	beqw 318c <_vsnprintf+0x7a2>
    2d10:	0c01 0058      	cmpib #88,%d1
    2d14:	6700 023e      	beqw 2f54 <_vsnprintf+0x56a>
        else if (*format == 'o') {
    2d18:	0c01 006f      	cmpib #111,%d1
    2d1c:	6700 02b4      	beqw 2fd2 <_vsnprintf+0x5e8>
        else if (*format == 'b') {
    2d20:	0c01 0062      	cmpib #98,%d1
    2d24:	6700 045a      	beqw 3180 <_vsnprintf+0x796>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2d28:	7aef           	moveq #-17,%d5
    2d2a:	ca80           	andl %d0,%d5
        if (flags & FLAGS_PRECISION) {
    2d2c:	2c00           	movel %d0,%d6
    2d2e:	0286 0000 0400 	andil #1024,%d6
        if ((*format != 'i') && (*format != 'd')) {
    2d34:	0c01 0069      	cmpib #105,%d1
    2d38:	6600 0564      	bnew 329e <_vsnprintf+0x8b4>
        if (flags & FLAGS_PRECISION) {
    2d3c:	4a86           	tstl %d6
    2d3e:	6600 0332      	bnew 3072 <_vsnprintf+0x688>
          if (flags & FLAGS_LONG_LONG) {
    2d42:	0280 0000 0200 	andil #512,%d0
    2d48:	2c47           	moveal %d7,%fp
          base = 10U;
    2d4a:	307c 000a      	moveaw #10,%a0
          if (flags & FLAGS_LONG_LONG) {
    2d4e:	4a80           	tstl %d0
    2d50:	6600 fce2      	bnew 2a34 <_vsnprintf+0x4a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2d54:	2c04           	movel %d4,%d6
    2d56:	5886           	addql #4,%d6
            const long value = va_arg(va, long);
    2d58:	2244           	moveal %d4,%a1
    2d5a:	2011           	movel %a1@,%d0
          else if (flags & FLAGS_LONG) {
    2d5c:	0805 0008      	btst #8,%d5
    2d60:	660e           	bnes 2d70 <_vsnprintf+0x386>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2d62:	0805 0006      	btst #6,%d5
    2d66:	6600 0320      	bnew 3088 <_vsnprintf+0x69e>
    2d6a:	4a05           	tstb %d5
    2d6c:	6a02           	bpls 2d70 <_vsnprintf+0x386>
    2d6e:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2d70:	2f05           	movel %d5,%sp@-
    2d72:	2f0b           	movel %a3,%sp@-
    2d74:	2f0c           	movel %a4,%sp@-
    2d76:	2f08           	movel %a0,%sp@-
    2d78:	2200           	movel %d0,%d1
    2d7a:	d281           	addl %d1,%d1
    2d7c:	9381           	subxl %d1,%d1
    2d7e:	4481           	negl %d1
    2d80:	2f01           	movel %d1,%sp@-
    2d82:	4a80           	tstl %d0
    2d84:	6d00 02fa      	bltw 3080 <_vsnprintf+0x696>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2d88:	2f00           	movel %d0,%sp@-
    2d8a:	2f02           	movel %d2,%sp@-
    2d8c:	2f0a           	movel %a2,%sp@-
    2d8e:	2f03           	movel %d3,%sp@-
    2d90:	2f0d           	movel %a5,%sp@-
    2d92:	4eb9 0000 253e 	jsr 253e <_ntoa_long>
    2d98:	2440           	moveal %d0,%a2
    2d9a:	4fef 0028      	lea %sp@(40),%sp
    2d9e:	2806           	movel %d6,%d4
  while (*format)
    2da0:	1016           	moveb %fp@,%d0
    2da2:	6600 fc70      	bnew 2a14 <_vsnprintf+0x2a>
    2da6:	6000 fc90      	braw 2a38 <_vsnprintf+0x4e>
        const char* p = va_arg(va, char*);
    2daa:	2f44 002c      	movel %d4,%sp@(44)
    2dae:	2044           	moveal %d4,%a0
    2db0:	58af 002c      	addql #4,%sp@(44)
    2db4:	2c58           	moveal %a0@+,%fp
  for (s = str; *s && maxsize--; ++s);
    2db6:	1216           	moveb %fp@,%d1
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    2db8:	b8fc 0000      	cmpaw #0,%a4
    2dbc:	6700 0112      	beqw 2ed0 <_vsnprintf+0x4e6>
  for (s = str; *s && maxsize--; ++s);
    2dc0:	4a01           	tstb %d1
    2dc2:	6700 0114      	beqw 2ed8 <_vsnprintf+0x4ee>
    2dc6:	280c           	movel %a4,%d4
    2dc8:	5384           	subql #1,%d4
    2dca:	41f6 4801      	lea %fp@(0000000000000001,%d4:l),%a0
    2dce:	224e           	moveal %fp,%a1
    2dd0:	5289           	addql #1,%a1
    2dd2:	4a11           	tstb %a1@
    2dd4:	6700 0226      	beqw 2ffc <_vsnprintf+0x612>
    2dd8:	b3c8           	cmpal %a0,%a1
    2dda:	66f4           	bnes 2dd0 <_vsnprintf+0x3e6>
  return (unsigned int)(s - str);
    2ddc:	2a08           	movel %a0,%d5
    2dde:	9a8e           	subl %fp,%d5
        if (flags & FLAGS_PRECISION) {
    2de0:	2800           	movel %d0,%d4
    2de2:	0284 0000 0400 	andil #1024,%d4
    2de8:	0800 000a      	btst #10,%d0
    2dec:	6706           	beqs 2df4 <_vsnprintf+0x40a>
          l = (l < precision ? l : precision);
    2dee:	b9c5           	cmpal %d5,%a4
    2df0:	6402           	bccs 2df4 <_vsnprintf+0x40a>
    2df2:	2a0c           	movel %a4,%d5
        if (!(flags & FLAGS_LEFT)) {
    2df4:	7c02           	moveq #2,%d6
    2df6:	cc80           	andl %d0,%d6
    2df8:	2f46 0030      	movel %d6,%sp@(48)
    2dfc:	0800 0001      	btst #1,%d0
    2e00:	6700 0224      	beqw 3026 <_vsnprintf+0x63c>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2e04:	4a01           	tstb %d1
    2e06:	6700 00fe      	beqw 2f06 <_vsnprintf+0x51c>
          out(*(p++), buffer, idx++, maxlen);
    2e0a:	200a           	movel %a2,%d0
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2e0c:	4a84           	tstl %d4
    2e0e:	670c           	beqs 2e1c <_vsnprintf+0x432>
    2e10:	41ec ffff      	lea %a4@(-1),%a0
    2e14:	b8fc 0000      	cmpaw #0,%a4
    2e18:	671c           	beqs 2e36 <_vsnprintf+0x44c>
    2e1a:	2848           	moveal %a0,%a4
          out(*(p++), buffer, idx++, maxlen);
    2e1c:	528a           	addql #1,%a2
    2e1e:	528e           	addql #1,%fp
    2e20:	2f02           	movel %d2,%sp@-
    2e22:	2f00           	movel %d0,%sp@-
    2e24:	2f03           	movel %d3,%sp@-
    2e26:	4881           	extw %d1
    2e28:	3041           	moveaw %d1,%a0
    2e2a:	2f08           	movel %a0,%sp@-
    2e2c:	4e95           	jsr %a5@
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2e2e:	1216           	moveb %fp@,%d1
    2e30:	4fef 0010      	lea %sp@(16),%sp
    2e34:	66d4           	bnes 2e0a <_vsnprintf+0x420>
        if (flags & FLAGS_LEFT) {
    2e36:	4aaf 0030      	tstl %sp@(48)
    2e3a:	6600 00ca      	bnew 2f06 <_vsnprintf+0x51c>
        const char* p = va_arg(va, char*);
    2e3e:	282f 002c      	movel %sp@(44),%d4
        break;
    2e42:	2c47           	moveal %d7,%fp
  while (*format)
    2e44:	1016           	moveb %fp@,%d0
    2e46:	6600 fbcc      	bnew 2a14 <_vsnprintf+0x2a>
    2e4a:	6000 fbec      	braw 2a38 <_vsnprintf+0x4e>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2e4e:	2c44           	moveal %d4,%fp
    2e50:	7221           	moveq #33,%d1
    2e52:	8280           	orl %d0,%d1
    2e54:	2f01           	movel %d1,%sp@-
    2e56:	4878 0008      	pea 8 <DUART_MR1B>
    2e5a:	2f0c           	movel %a4,%sp@-
    2e5c:	4878 0010      	pea 10 <DUART_IVR>
    2e60:	42a7           	clrl %sp@-
    2e62:	2f1e           	movel %fp@+,%sp@-
    2e64:	2f02           	movel %d2,%sp@-
    2e66:	2f0a           	movel %a2,%sp@-
    2e68:	2f03           	movel %d3,%sp@-
    2e6a:	2f0d           	movel %a5,%sp@-
    2e6c:	4eb9 0000 253e 	jsr 253e <_ntoa_long>
    2e72:	2440           	moveal %d0,%a2
        break;
    2e74:	4fef 0028      	lea %sp@(40),%sp
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2e78:	280e           	movel %fp,%d4
        break;
    2e7a:	2c47           	moveal %d7,%fp
  while (*format)
    2e7c:	1016           	moveb %fp@,%d0
    2e7e:	6600 fb94      	bnew 2a14 <_vsnprintf+0x2a>
    2e82:	6000 fbb4      	braw 2a38 <_vsnprintf+0x4e>
        if (*format == 'h') {
    2e86:	122e 0001      	moveb %fp@(1),%d1
    2e8a:	0c01 0068      	cmpib #104,%d1
    2e8e:	6700 0184      	beqw 3014 <_vsnprintf+0x62a>
        flags |= FLAGS_SHORT;
    2e92:	7c7f           	moveq #127,%d6
    2e94:	4606           	notb %d6
    2e96:	8086           	orl %d6,%d0
        format++;
    2e98:	5287           	addql #1,%d7
    2e9a:	6000 fc50      	braw 2aec <_vsnprintf+0x102>
  unsigned int i = 0U;
    2e9e:	99cc           	subal %a4,%a4
    2ea0:	204c           	moveal %a4,%a0
    2ea2:	2247           	moveal %d7,%a1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2ea4:	5289           	addql #1,%a1
    2ea6:	49f0 8800      	lea %a0@(0000000000000000,%a0:l),%a4
    2eaa:	d9cc           	addal %a4,%a4
    2eac:	d9c8           	addal %a0,%a4
    2eae:	d9cc           	addal %a4,%a4
    2eb0:	4881           	extw %d1
    2eb2:	41f4 10d0      	lea %a4@(ffffffffffffffd0,%d1:w),%a0
  while (_is_digit(**str)) {
    2eb6:	1211           	moveb %a1@,%d1
  return (ch >= '0') && (ch <= '9');
    2eb8:	1c01           	moveb %d1,%d6
    2eba:	0606 ffd0      	addib #-48,%d6
  while (_is_digit(**str)) {
    2ebe:	0c06 0009      	cmpib #9,%d6
    2ec2:	63e0           	blss 2ea4 <_vsnprintf+0x4ba>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2ec4:	2848           	moveal %a0,%a4
    2ec6:	2e09           	movel %a1,%d7
    2ec8:	2c49           	moveal %a1,%fp
        format++;
    2eca:	5287           	addql #1,%d7
    2ecc:	6000 fbf4      	braw 2ac2 <_vsnprintf+0xd8>
  for (s = str; *s && maxsize--; ++s);
    2ed0:	78fe           	moveq #-2,%d4
    2ed2:	4a01           	tstb %d1
    2ed4:	6600 fef4      	bnew 2dca <_vsnprintf+0x3e0>
    2ed8:	7a00           	moveq #0,%d5
    2eda:	6000 ff04      	braw 2de0 <_vsnprintf+0x3f6>
        const int prec = (int)va_arg(va, int);
    2ede:	2044           	moveal %d4,%a0
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2ee0:	2858           	moveal %a0@+,%a4
    2ee2:	b8fc 0000      	cmpaw #0,%a4
    2ee6:	6d00 00d8      	bltw 2fc0 <_vsnprintf+0x5d6>
    switch (*format) {
    2eea:	122e 0002      	moveb %fp@(2),%d1
        format++;
    2eee:	2e0e           	movel %fp,%d7
    2ef0:	5687           	addql #3,%d7
        const int prec = (int)va_arg(va, int);
    2ef2:	2808           	movel %a0,%d4
        format++;
    2ef4:	548e           	addql #2,%fp
    2ef6:	6000 fbca      	braw 2ac2 <_vsnprintf+0xd8>
  while (*format)
    2efa:	7800           	moveq #0,%d4
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2efc:	b48a           	cmpl %a2,%d2
    2efe:	6200 fb42      	bhiw 2a42 <_vsnprintf+0x58>
    2f02:	6000 fb3a      	braw 2a3e <_vsnprintf+0x54>
    2f06:	280a           	movel %a2,%d4
          while (l++ < width) {
    2f08:	ba8b           	cmpl %a3,%d5
    2f0a:	6400 ff32      	bccw 2e3e <_vsnprintf+0x454>
    2f0e:	200b           	movel %a3,%d0
    2f10:	d08a           	addl %a2,%d0
    2f12:	2440           	moveal %d0,%a2
    2f14:	95c5           	subal %d5,%a2
            out(' ', buffer, idx++, maxlen);
    2f16:	2004           	movel %d4,%d0
    2f18:	5284           	addql #1,%d4
    2f1a:	2f02           	movel %d2,%sp@-
    2f1c:	2f00           	movel %d0,%sp@-
    2f1e:	2f03           	movel %d3,%sp@-
    2f20:	4878 0020      	pea 20 <DUART_RBA+0x2>
    2f24:	4e95           	jsr %a5@
          while (l++ < width) {
    2f26:	4fef 0010      	lea %sp@(16),%sp
    2f2a:	b5c4           	cmpal %d4,%a2
    2f2c:	6700 ff10      	beqw 2e3e <_vsnprintf+0x454>
            out(' ', buffer, idx++, maxlen);
    2f30:	2004           	movel %d4,%d0
    2f32:	5284           	addql #1,%d4
    2f34:	2f02           	movel %d2,%sp@-
    2f36:	2f00           	movel %d0,%sp@-
    2f38:	2f03           	movel %d3,%sp@-
    2f3a:	4878 0020      	pea 20 <DUART_RBA+0x2>
    2f3e:	4e95           	jsr %a5@
          while (l++ < width) {
    2f40:	4fef 0010      	lea %sp@(16),%sp
    2f44:	b5c4           	cmpal %d4,%a2
    2f46:	66ce           	bnes 2f16 <_vsnprintf+0x52c>
    2f48:	6000 fef4      	braw 2e3e <_vsnprintf+0x454>
        if (*format == 'x' || *format == 'X') {
    2f4c:	0c01 0058      	cmpib #88,%d1
    2f50:	6600 fdce      	bnew 2d20 <_vsnprintf+0x336>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2f54:	7af3           	moveq #-13,%d5
    2f56:	ca80           	andl %d0,%d5
    2f58:	7220           	moveq #32,%d1
    2f5a:	8a81           	orl %d1,%d5
        if (flags & FLAGS_PRECISION) {
    2f5c:	0800 000a      	btst #10,%d0
    2f60:	6700 0100      	beqw 3062 <_vsnprintf+0x678>
    2f64:	2c47           	moveal %d7,%fp
    2f66:	7258           	moveq #88,%d1
          base = 16U;
    2f68:	307c 0010      	moveaw #16,%a0
          flags &= ~FLAGS_ZEROPAD;
    2f6c:	70fe           	moveq #-2,%d0
    2f6e:	ca80           	andl %d0,%d5
          if (flags & FLAGS_LONG_LONG) {
    2f70:	2005           	movel %d5,%d0
    2f72:	0280 0000 0200 	andil #512,%d0
        if ((*format == 'i') || (*format == 'd')) {
    2f78:	0c01 0069      	cmpib #105,%d1
    2f7c:	6700 fdd0      	beqw 2d4e <_vsnprintf+0x364>
    2f80:	0c01 0064      	cmpib #100,%d1
    2f84:	6700 fdc8      	beqw 2d4e <_vsnprintf+0x364>
          if (flags & FLAGS_LONG_LONG) {
    2f88:	4a80           	tstl %d0
    2f8a:	6600 faa8      	bnew 2a34 <_vsnprintf+0x4a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2f8e:	2c04           	movel %d4,%d6
    2f90:	5886           	addql #4,%d6
          else if (flags & FLAGS_LONG) {
    2f92:	0805 0008      	btst #8,%d5
    2f96:	6600 020e      	bnew 31a6 <_vsnprintf+0x7bc>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2f9a:	0805 0006      	btst #6,%d5
    2f9e:	6600 017e      	bnew 311e <_vsnprintf+0x734>
    2fa2:	2244           	moveal %d4,%a1
    2fa4:	2011           	movel %a1@,%d0
    2fa6:	4a05           	tstb %d5
    2fa8:	6a06           	bpls 2fb0 <_vsnprintf+0x5c6>
    2faa:	0280 0000 ffff 	andil #65535,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2fb0:	2f05           	movel %d5,%sp@-
    2fb2:	2f0b           	movel %a3,%sp@-
    2fb4:	2f0c           	movel %a4,%sp@-
    2fb6:	2f08           	movel %a0,%sp@-
    2fb8:	42a7           	clrl %sp@-
    2fba:	2f00           	movel %d0,%sp@-
    2fbc:	6000 fdcc      	braw 2d8a <_vsnprintf+0x3a0>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2fc0:	99cc           	subal %a4,%a4
    switch (*format) {
    2fc2:	122e 0002      	moveb %fp@(2),%d1
        format++;
    2fc6:	2e0e           	movel %fp,%d7
    2fc8:	5687           	addql #3,%d7
        const int prec = (int)va_arg(va, int);
    2fca:	2808           	movel %a0,%d4
        format++;
    2fcc:	548e           	addql #2,%fp
    2fce:	6000 faf2      	braw 2ac2 <_vsnprintf+0xd8>
          base =  8U;
    2fd2:	307c 0008      	moveaw #8,%a0
    precision = 0U;
    2fd6:	2c47           	moveal %d7,%fp
    2fd8:	2a00           	movel %d0,%d5
        if (flags & FLAGS_PRECISION) {
    2fda:	2005           	movel %d5,%d0
    2fdc:	0280 0000 0400 	andil #1024,%d0
        if ((*format != 'i') && (*format != 'd')) {
    2fe2:	0c01 0064      	cmpib #100,%d1
    2fe6:	6600 02c0      	bnew 32a8 <_vsnprintf+0x8be>
        if (flags & FLAGS_PRECISION) {
    2fea:	4a80           	tstl %d0
    2fec:	6600 ff7e      	bnew 2f6c <_vsnprintf+0x582>
          if (flags & FLAGS_LONG_LONG) {
    2ff0:	2005           	movel %d5,%d0
    2ff2:	0280 0000 0200 	andil #512,%d0
    2ff8:	6000 fd54      	braw 2d4e <_vsnprintf+0x364>
  return (unsigned int)(s - str);
    2ffc:	2a09           	movel %a1,%d5
    2ffe:	9a8e           	subl %fp,%d5
    3000:	6000 fdde      	braw 2de0 <_vsnprintf+0x3f6>
          flags |= FLAGS_LONG_LONG;
    3004:	0040 0300      	oriw #768,%d0
    switch (*format) {
    3008:	122e 0002      	moveb %fp@(2),%d1
        format++;
    300c:	2e0e           	movel %fp,%d7
    300e:	5687           	addql #3,%d7
    3010:	6000 fada      	braw 2aec <_vsnprintf+0x102>
          flags |= FLAGS_CHAR;
    3014:	723f           	moveq #63,%d1
    3016:	4601           	notb %d1
    3018:	8081           	orl %d1,%d0
    switch (*format) {
    301a:	122e 0002      	moveb %fp@(2),%d1
        format++;
    301e:	2e0e           	movel %fp,%d7
    3020:	5687           	addql #3,%d7
    3022:	6000 fac8      	braw 2aec <_vsnprintf+0x102>
          while (l++ < width) {
    3026:	2005           	movel %d5,%d0
    3028:	5280           	addql #1,%d0
    302a:	ba8b           	cmpl %a3,%d5
    302c:	6400 01bc      	bccw 31ea <_vsnprintf+0x800>
    3030:	2c0b           	movel %a3,%d6
    3032:	dc8a           	addl %a2,%d6
    3034:	9c85           	subl %d5,%d6
            out(' ', buffer, idx++, maxlen);
    3036:	200a           	movel %a2,%d0
    3038:	528a           	addql #1,%a2
    303a:	2f02           	movel %d2,%sp@-
    303c:	2f00           	movel %d0,%sp@-
    303e:	2f03           	movel %d3,%sp@-
    3040:	4878 0020      	pea 20 <DUART_RBA+0x2>
    3044:	4e95           	jsr %a5@
          while (l++ < width) {
    3046:	4fef 0010      	lea %sp@(16),%sp
    304a:	b5c6           	cmpal %d6,%a2
    304c:	66e8           	bnes 3036 <_vsnprintf+0x64c>
    304e:	2a0b           	movel %a3,%d5
    3050:	5285           	addql #1,%d5
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3052:	1216           	moveb %fp@,%d1
    3054:	6600 fdb4      	bnew 2e0a <_vsnprintf+0x420>
        const char* p = va_arg(va, char*);
    3058:	282f 002c      	movel %sp@(44),%d4
        break;
    305c:	2c47           	moveal %d7,%fp
    305e:	6000 fde4      	braw 2e44 <_vsnprintf+0x45a>
          if (flags & FLAGS_LONG_LONG) {
    3062:	0280 0000 0200 	andil #512,%d0
    3068:	2c47           	moveal %d7,%fp
          base = 16U;
    306a:	307c 0010      	moveaw #16,%a0
    306e:	6000 ff18      	braw 2f88 <_vsnprintf+0x59e>
        if (flags & FLAGS_PRECISION) {
    3072:	2c47           	moveal %d7,%fp
          base = 10U;
    3074:	307c 000a      	moveaw #10,%a0
          flags &= ~FLAGS_ZEROPAD;
    3078:	70fe           	moveq #-2,%d0
    307a:	ca80           	andl %d0,%d5
    307c:	6000 fef2      	braw 2f70 <_vsnprintf+0x586>
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3080:	4480           	negl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3082:	2f00           	movel %d0,%sp@-
    3084:	6000 fd04      	braw 2d8a <_vsnprintf+0x3a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3088:	4880           	extw %d0
    308a:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    308c:	2f05           	movel %d5,%sp@-
    308e:	2f0b           	movel %a3,%sp@-
    3090:	2f0c           	movel %a4,%sp@-
    3092:	2f08           	movel %a0,%sp@-
    3094:	2200           	movel %d0,%d1
    3096:	d281           	addl %d1,%d1
    3098:	9381           	subxl %d1,%d1
    309a:	4481           	negl %d1
    309c:	2f01           	movel %d1,%sp@-
    309e:	4a80           	tstl %d0
    30a0:	6c00 fce6      	bgew 2d88 <_vsnprintf+0x39e>
    30a4:	60da           	bras 3080 <_vsnprintf+0x696>
    switch (*format) {
    30a6:	2c47           	moveal %d7,%fp
      out(*format, buffer, idx++, maxlen);
    30a8:	2c0a           	movel %a2,%d6
    30aa:	5286           	addql #1,%d6
    30ac:	2a06           	movel %d6,%d5
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    30ae:	2e04           	movel %d4,%d7
    30b0:	5887           	addql #4,%d7
        if (!(flags & FLAGS_LEFT)) {
    30b2:	0800 0001      	btst #1,%d0
    30b6:	6700 0082      	beqw 313a <_vsnprintf+0x750>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    30ba:	2f02           	movel %d2,%sp@-
    30bc:	2f0a           	movel %a2,%sp@-
    30be:	2f03           	movel %d3,%sp@-
    30c0:	2244           	moveal %d4,%a1
    30c2:	2011           	movel %a1@,%d0
    30c4:	4880           	extw %d0
    30c6:	3040           	moveaw %d0,%a0
    30c8:	2f08           	movel %a0,%sp@-
    30ca:	4e95           	jsr %a5@
          while (l++ < width) {
    30cc:	4fef 0010      	lea %sp@(16),%sp
    30d0:	d5cb           	addal %a3,%a2
    30d2:	7001           	moveq #1,%d0
    30d4:	b08b           	cmpl %a3,%d0
    30d6:	645c           	bccs 3134 <_vsnprintf+0x74a>
            out(' ', buffer, idx++, maxlen);
    30d8:	2005           	movel %d5,%d0
    30da:	5285           	addql #1,%d5
    30dc:	2f02           	movel %d2,%sp@-
    30de:	2f00           	movel %d0,%sp@-
    30e0:	2f03           	movel %d3,%sp@-
    30e2:	4878 0020      	pea 20 <DUART_RBA+0x2>
    30e6:	4e95           	jsr %a5@
          while (l++ < width) {
    30e8:	4fef 0010      	lea %sp@(16),%sp
    30ec:	b5c5           	cmpal %d5,%a2
    30ee:	66e8           	bnes 30d8 <_vsnprintf+0x6ee>
        break;
    30f0:	2807           	movel %d7,%d4
  while (*format)
    30f2:	1016           	moveb %fp@,%d0
    30f4:	6600 f91e      	bnew 2a14 <_vsnprintf+0x2a>
    30f8:	6000 f93e      	braw 2a38 <_vsnprintf+0x4e>
    switch (*format) {
    30fc:	2c47           	moveal %d7,%fp
        out('%', buffer, idx++, maxlen);
    30fe:	2a0a           	movel %a2,%d5
    3100:	5285           	addql #1,%d5
    3102:	2f02           	movel %d2,%sp@-
    3104:	2f0a           	movel %a2,%sp@-
    3106:	2f03           	movel %d3,%sp@-
    3108:	4878 0025      	pea 25 <DUART_RBA+0x7>
    310c:	4e95           	jsr %a5@
        break;
    310e:	4fef 0010      	lea %sp@(16),%sp
        out('%', buffer, idx++, maxlen);
    3112:	2445           	moveal %d5,%a2
  while (*format)
    3114:	1016           	moveb %fp@,%d0
    3116:	6600 f8fc      	bnew 2a14 <_vsnprintf+0x2a>
    311a:	6000 f91c      	braw 2a38 <_vsnprintf+0x4e>
    311e:	7000           	moveq #0,%d0
    3120:	4600           	notb %d0
    3122:	2244           	moveal %d4,%a1
    3124:	c091           	andl %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3126:	2f05           	movel %d5,%sp@-
    3128:	2f0b           	movel %a3,%sp@-
    312a:	2f0c           	movel %a4,%sp@-
    312c:	2f08           	movel %a0,%sp@-
    312e:	42a7           	clrl %sp@-
    3130:	6000 fe88      	braw 2fba <_vsnprintf+0x5d0>
          while (l++ < width) {
    3134:	2446           	moveal %d6,%a2
        break;
    3136:	2807           	movel %d7,%d4
    3138:	60b8           	bras 30f2 <_vsnprintf+0x708>
          while (l++ < width) {
    313a:	7001           	moveq #1,%d0
    313c:	b08b           	cmpl %a3,%d0
    313e:	6400 008e      	bccw 31ce <_vsnprintf+0x7e4>
    3142:	47f2 b8ff      	lea %a2@(ffffffffffffffff,%a3:l),%a3
            out(' ', buffer, idx++, maxlen);
    3146:	200a           	movel %a2,%d0
    3148:	2446           	moveal %d6,%a2
    314a:	2f02           	movel %d2,%sp@-
    314c:	2f00           	movel %d0,%sp@-
    314e:	2f03           	movel %d3,%sp@-
    3150:	4878 0020      	pea 20 <DUART_RBA+0x2>
    3154:	4e95           	jsr %a5@
          while (l++ < width) {
    3156:	4fef 0010      	lea %sp@(16),%sp
    315a:	b7c6           	cmpal %d6,%a3
    315c:	6704           	beqs 3162 <_vsnprintf+0x778>
    315e:	5286           	addql #1,%d6
    3160:	60e4           	bras 3146 <_vsnprintf+0x75c>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3162:	528a           	addql #1,%a2
    3164:	2f02           	movel %d2,%sp@-
    3166:	2f0b           	movel %a3,%sp@-
    3168:	2f03           	movel %d3,%sp@-
    316a:	2044           	moveal %d4,%a0
    316c:	2010           	movel %a0@,%d0
    316e:	4880           	extw %d0
    3170:	3240           	moveaw %d0,%a1
    3172:	2f09           	movel %a1,%sp@-
    3174:	4e95           	jsr %a5@
    3176:	4fef 0010      	lea %sp@(16),%sp
        break;
    317a:	2807           	movel %d7,%d4
    317c:	6000 ff74      	braw 30f2 <_vsnprintf+0x708>
          base =  2U;
    3180:	307c 0002      	moveaw #2,%a0
    precision = 0U;
    3184:	2c47           	moveal %d7,%fp
    3186:	2a00           	movel %d0,%d5
    3188:	6000 fe50      	braw 2fda <_vsnprintf+0x5f0>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    318c:	7af3           	moveq #-13,%d5
    318e:	ca80           	andl %d0,%d5
        if (flags & FLAGS_PRECISION) {
    3190:	0800 000a      	btst #10,%d0
    3194:	6700 fecc      	beqw 3062 <_vsnprintf+0x678>
    3198:	2c47           	moveal %d7,%fp
          base = 16U;
    319a:	307c 0010      	moveaw #16,%a0
          flags &= ~FLAGS_ZEROPAD;
    319e:	70fe           	moveq #-2,%d0
    31a0:	ca80           	andl %d0,%d5
    31a2:	6000 fdcc      	braw 2f70 <_vsnprintf+0x586>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    31a6:	2f05           	movel %d5,%sp@-
    31a8:	2f0b           	movel %a3,%sp@-
    31aa:	2f0c           	movel %a4,%sp@-
    31ac:	2f08           	movel %a0,%sp@-
    31ae:	42a7           	clrl %sp@-
    31b0:	2044           	moveal %d4,%a0
    31b2:	2f10           	movel %a0@,%sp@-
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    31b4:	2f02           	movel %d2,%sp@-
    31b6:	2f0a           	movel %a2,%sp@-
    31b8:	2f03           	movel %d3,%sp@-
    31ba:	2f0d           	movel %a5,%sp@-
    31bc:	4eb9 0000 253e 	jsr 253e <_ntoa_long>
    31c2:	2440           	moveal %d0,%a2
    31c4:	4fef 0028      	lea %sp@(40),%sp
    31c8:	2806           	movel %d6,%d4
        break;
    31ca:	6000 fbd4      	braw 2da0 <_vsnprintf+0x3b6>
          while (l++ < width) {
    31ce:	264a           	moveal %a2,%a3
    31d0:	2446           	moveal %d6,%a2
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    31d2:	2f02           	movel %d2,%sp@-
    31d4:	2f0b           	movel %a3,%sp@-
    31d6:	2f03           	movel %d3,%sp@-
    31d8:	2044           	moveal %d4,%a0
    31da:	2010           	movel %a0@,%d0
    31dc:	4880           	extw %d0
    31de:	3240           	moveaw %d0,%a1
    31e0:	2f09           	movel %a1,%sp@-
    31e2:	4e95           	jsr %a5@
    31e4:	4fef 0010      	lea %sp@(16),%sp
    31e8:	6090           	bras 317a <_vsnprintf+0x790>
          while (l++ < width) {
    31ea:	2a00           	movel %d0,%d5
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    31ec:	4a01           	tstb %d1
    31ee:	6600 fc1a      	bnew 2e0a <_vsnprintf+0x420>
    31f2:	6000 fe64      	braw 3058 <_vsnprintf+0x66e>
    switch (*format) {
    31f6:	1a01           	moveb %d1,%d5
    31f8:	0605 ffdb      	addib #-37,%d5
    31fc:	0c05 0044      	cmpib #68,%d5
    3200:	6200 fa02      	bhiw 2c04 <_vsnprintf+0x21a>
    3204:	0285 0000 00ff 	andil #255,%d5
    320a:	da85           	addl %d5,%d5
    320c:	307b 5806      	moveaw %pc@(3214 <_vsnprintf+0x82a>,%d5:l),%a0
    3210:	4efb 8002      	jmp %pc@(3214 <_vsnprintf+0x82a>,%a0:w)
    3214:	fee8           	.short 0xfee8
    3216:	f9f0           	.short 0xf9f0
    3218:	f9f0           	.short 0xf9f0
    321a:	f9f0           	.short 0xf9f0
    321c:	f9f0           	.short 0xf9f0
    321e:	f9f0           	.short 0xf9f0
    3220:	f9f0           	.short 0xf9f0
    3222:	f9f0           	.short 0xf9f0
    3224:	f9f0           	.short 0xf9f0
    3226:	f9f0           	.short 0xf9f0
    3228:	f9f0           	.short 0xf9f0
    322a:	f9f0           	.short 0xf9f0
    322c:	f9f0           	.short 0xf9f0
    322e:	f9f0           	.short 0xf9f0
    3230:	f9f0           	.short 0xf9f0
    3232:	f9f0           	.short 0xf9f0
    3234:	f9f0           	.short 0xf9f0
    3236:	f9f0           	.short 0xf9f0
    3238:	f9f0           	.short 0xf9f0
    323a:	f9f0           	.short 0xf9f0
    323c:	f9f0           	.short 0xf9f0
    323e:	f9f0           	.short 0xf9f0
    3240:	f9f0           	.short 0xf9f0
    3242:	f9f0           	.short 0xf9f0
    3244:	f9f0           	.short 0xf9f0
    3246:	f9f0           	.short 0xf9f0
    3248:	f9f0           	.short 0xf9f0
    324a:	f9f0           	.short 0xf9f0
    324c:	f9f0           	.short 0xf9f0
    324e:	f9f0           	.short 0xf9f0
    3250:	f9f0           	.short 0xf9f0
    3252:	f9f0           	.short 0xf9f0
    3254:	f9f0           	.short 0xf9f0
    3256:	f9f0           	.short 0xf9f0
    3258:	f9f0           	.short 0xf9f0
    325a:	f9f0           	.short 0xf9f0
    325c:	f9f0           	.short 0xf9f0
    325e:	f9f0           	.short 0xf9f0
    3260:	f9f0           	.short 0xf9f0
    3262:	f9f0           	.short 0xf9f0
    3264:	f9f0           	.short 0xf9f0
    3266:	f9f0           	.short 0xf9f0
    3268:	f9f0           	.short 0xf9f0
    326a:	f9f0           	.short 0xf9f0
    326c:	f9f0           	.short 0xf9f0
    326e:	f9f0           	.short 0xf9f0
    3270:	f9f0           	.short 0xf9f0
    3272:	f9f0           	.short 0xf9f0
    3274:	f9f0           	.short 0xf9f0
    3276:	f9f0           	.short 0xf9f0
    3278:	f9f0           	.short 0xf9f0
    327a:	fd38           	.short 0xfd38
    327c:	f9f0           	.short 0xf9f0
    327e:	f9f0           	.short 0xf9f0
    3280:	f9f0           	.short 0xf9f0
    3282:	f9f0           	.short 0xf9f0
    3284:	f9f0           	.short 0xf9f0
    3286:	f9f0           	.short 0xf9f0
    3288:	f9f0           	.short 0xf9f0
    328a:	f9f0           	.short 0xf9f0
    328c:	f9f0           	.short 0xf9f0
    328e:	fd38           	.short 0xfd38
    3290:	fe92           	.short 0xfe92
    3292:	fd38           	.short 0xfd38
    3294:	f9f0           	.short 0xf9f0
    3296:	f9f0           	.short 0xf9f0
    3298:	f9f0           	.short 0xf9f0
    329a:	f9f0           	.short 0xf9f0
    329c:	fd38           	.short 0xfd38
    329e:	2c47           	moveal %d7,%fp
          base = 10U;
    32a0:	307c 000a      	moveaw #10,%a0
    32a4:	6000 fd34      	braw 2fda <_vsnprintf+0x5f0>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    32a8:	7cf3           	moveq #-13,%d6
    32aa:	ca86           	andl %d6,%d5
        if (flags & FLAGS_PRECISION) {
    32ac:	4a80           	tstl %d0
    32ae:	6700 fcc0      	beqw 2f70 <_vsnprintf+0x586>
          flags &= ~FLAGS_ZEROPAD;
    32b2:	70fe           	moveq #-2,%d0
    32b4:	ca80           	andl %d0,%d5
    32b6:	6000 fcb8      	braw 2f70 <_vsnprintf+0x586>

000032ba <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    32ba:	4e56 fffc      	linkw %fp,#-4
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    32be:	486e 000c      	pea %fp@(12)
    32c2:	2f2e 0008      	movel %fp@(8),%sp@-
    32c6:	4878 ffff      	pea ffffffff <ROMBASE+0xff03ffff>
    32ca:	486e ffff      	pea %fp@(-1)
    32ce:	4879 0000 29d2 	pea 29d2 <_out_char>
    32d4:	4eb9 0000 29ea 	jsr 29ea <_vsnprintf>
  va_end(va);
  return ret;
    32da:	4fef 0014      	lea %sp@(20),%sp
}
    32de:	4e5e           	unlk %fp
    32e0:	4e75           	rts

000032e2 <vsnprintf_>:
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    32e2:	2f2f 0010      	movel %sp@(16),%sp@-
    32e6:	2f2f 0010      	movel %sp@(16),%sp@-
    32ea:	2f2f 0010      	movel %sp@(16),%sp@-
    32ee:	2f2f 0010      	movel %sp@(16),%sp@-
    32f2:	4879 0000 2524 	pea 2524 <_out_buffer>
    32f8:	4eb9 0000 29ea 	jsr 29ea <_vsnprintf>
    32fe:	4fef 0014      	lea %sp@(20),%sp
}
    3302:	4e75           	rts

00003304 <_putchar>:
static char crbuf[2] = { '\r', 0 };

/*
 * This is used by printf.
 */
void _putchar(char chr) {
    3304:	2f02           	movel %d2,%sp@-
    3306:	242f 0008      	movel %sp@(8),%d2
  if (chr == '\n') {
    330a:	0c02 000a      	cmpib #10,%d2
    330e:	6714           	beqs 3324 <_putchar+0x20>
    // is LF, print CR too
    mcPrint(crbuf);
  }

  buf[0] = chr;
    3310:	41f9 0000 45bc 	lea 45bc <buf>,%a0
    3316:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    3318:	2f48 0008      	movel %a0,%sp@(8)
}
    331c:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    331e:	4ef9 0000 3346 	jmp 3346 <mcPrint>
    mcPrint(crbuf);
    3324:	4879 0000 35b1 	pea 35b1 <crbuf>
    332a:	4eb9 0000 3346 	jsr 3346 <mcPrint>
    3330:	588f           	addql #4,%sp
  buf[0] = chr;
    3332:	41f9 0000 45bc 	lea 45bc <buf>,%a0
    3338:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    333a:	2f48 0008      	movel %a0,%sp@(8)
}
    333e:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    3340:	4ef9 0000 3346 	jmp 3346 <mcPrint>

00003346 <mcPrint>:
    3346:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    334a:	206f 0010      	moveal %sp@(16),%a0
    334e:	7200           	moveq #0,%d1
    3350:	4e4e           	trap #14
    3352:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    3356:	4e75           	rts

00003358 <mcReadchar>:
    3358:	2f01           	movel %d1,%sp@-
    335a:	7203           	moveq #3,%d1
    335c:	4e4e           	trap #14
    335e:	221f           	movel %sp@+,%d1
    3360:	4e75           	rts

00003362 <mcCheckchar>:
    3362:	2f01           	movel %d1,%sp@-
    3364:	7206           	moveq #6,%d1
    3366:	4e4e           	trap #14
    3368:	4880           	extw %d0
    336a:	48c0           	extl %d0
    336c:	221f           	movel %sp@+,%d1
    336e:	4e75           	rts

00003370 <mcDelaymsec10>:
    3370:	202f 0004      	movel %sp@(4),%d0
    3374:	d0b8 040c      	addl 40c <_TIMER_100HZ>,%d0
    3378:	b0b8 040c      	cmpl 40c <_TIMER_100HZ>,%d0
    337c:	64fa           	bccs 3378 <mcDelaymsec10+0x8>
    337e:	4e75           	rts

00003380 <__kinit>:
// Linker defines
extern uint32_t _data_start, _data_end, _code_end, _bss_start, _bss_end;

void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    3380:	41f9 0000 35b4 	lea 35b4 <_data_end>,%a0
    3386:	b1fc 0000 45c0 	cmpal #17856,%a0
    338c:	641c           	bccs 33aa <__kinit+0x2a>
    338e:	203c 0000 45c0 	movel #17856,%d0
    3394:	0480 0000 35b5 	subil #13749,%d0
    339a:	72fc           	moveq #-4,%d1
    339c:	c081           	andl %d1,%d0
    339e:	0680 0000 35b8 	addil #13752,%d0
    33a4:	4298           	clrl %a0@+
    33a6:	b088           	cmpl %a0,%d0
    33a8:	66fa           	bnes 33a4 <__kinit+0x24>
}
    33aa:	4e75           	rts

000033ac <__udivsi3>:
    33ac:	2f02           	movel %d2,%sp@-
    33ae:	222f 000c      	movel %sp@(12),%d1
    33b2:	202f 0008      	movel %sp@(8),%d0
    33b6:	0c81 0001 0000 	cmpil #65536,%d1
    33bc:	6416           	bccs 33d4 <L3>
    33be:	2400           	movel %d0,%d2
    33c0:	4242           	clrw %d2
    33c2:	4842           	swap %d2
    33c4:	84c1           	divuw %d1,%d2
    33c6:	3002           	movew %d2,%d0
    33c8:	4840           	swap %d0
    33ca:	342f 000a      	movew %sp@(10),%d2
    33ce:	84c1           	divuw %d1,%d2
    33d0:	3002           	movew %d2,%d0
    33d2:	6030           	bras 3404 <L6>

000033d4 <L3>:
    33d4:	2401           	movel %d1,%d2

000033d6 <L4>:
    33d6:	e289           	lsrl #1,%d1
    33d8:	e288           	lsrl #1,%d0
    33da:	0c81 0001 0000 	cmpil #65536,%d1
    33e0:	64f4           	bccs 33d6 <L4>
    33e2:	80c1           	divuw %d1,%d0
    33e4:	0280 0000 ffff 	andil #65535,%d0
    33ea:	2202           	movel %d2,%d1
    33ec:	c2c0           	muluw %d0,%d1
    33ee:	4842           	swap %d2
    33f0:	c4c0           	muluw %d0,%d2
    33f2:	4842           	swap %d2
    33f4:	4a42           	tstw %d2
    33f6:	660a           	bnes 3402 <L5>
    33f8:	d282           	addl %d2,%d1
    33fa:	6506           	bcss 3402 <L5>
    33fc:	b2af 0008      	cmpl %sp@(8),%d1
    3400:	6302           	blss 3404 <L6>

00003402 <L5>:
    3402:	5380           	subql #1,%d0

00003404 <L6>:
    3404:	241f           	movel %sp@+,%d2
    3406:	4e75           	rts

00003408 <__divsi3>:
    3408:	2f02           	movel %d2,%sp@-
    340a:	7401           	moveq #1,%d2
    340c:	222f 000c      	movel %sp@(12),%d1
    3410:	6a04           	bpls 3416 <L1>
    3412:	4481           	negl %d1
    3414:	4402           	negb %d2

00003416 <L1>:
    3416:	202f 0008      	movel %sp@(8),%d0
    341a:	6a04           	bpls 3420 <L2>
    341c:	4480           	negl %d0
    341e:	4402           	negb %d2

00003420 <L2>:
    3420:	2f01           	movel %d1,%sp@-
    3422:	2f00           	movel %d0,%sp@-
    3424:	4eb9 0000 33ac 	jsr 33ac <__udivsi3>
    342a:	508f           	addql #8,%sp
    342c:	4a02           	tstb %d2
    342e:	6a02           	bpls 3432 <L3>
    3430:	4480           	negl %d0

00003432 <L3>:
    3432:	241f           	movel %sp@+,%d2
    3434:	4e75           	rts
	...

00003438 <__umodsi3>:
    3438:	222f 0008      	movel %sp@(8),%d1
    343c:	202f 0004      	movel %sp@(4),%d0
    3440:	2f01           	movel %d1,%sp@-
    3442:	2f00           	movel %d0,%sp@-
    3444:	4eb9 0000 33ac 	jsr 33ac <__udivsi3>
    344a:	508f           	addql #8,%sp
    344c:	222f 0008      	movel %sp@(8),%d1
    3450:	2f01           	movel %d1,%sp@-
    3452:	2f00           	movel %d0,%sp@-
    3454:	4eb9 0000 3468 	jsr 3468 <__mulsi3>
    345a:	508f           	addql #8,%sp
    345c:	222f 0004      	movel %sp@(4),%d1
    3460:	9280           	subl %d0,%d1
    3462:	2001           	movel %d1,%d0
    3464:	4e75           	rts
	...

00003468 <__mulsi3>:
    3468:	302f 0004      	movew %sp@(4),%d0
    346c:	c0ef 000a      	muluw %sp@(10),%d0
    3470:	322f 0006      	movew %sp@(6),%d1
    3474:	c2ef 0008      	muluw %sp@(8),%d1
    3478:	d041           	addw %d1,%d0
    347a:	4840           	swap %d0
    347c:	4240           	clrw %d0
    347e:	322f 0006      	movew %sp@(6),%d1
    3482:	c2ef 000a      	muluw %sp@(10),%d1
    3486:	d081           	addl %d1,%d0
    3488:	4e75           	rts
    348a:	726f           	moveq #111,%d1
    348c:	7363           	.short 0x7363
    348e:	6f5f           	bles 34ef <__mulsi3+0x87>
    3490:	6d36           	blts 34c8 <__mulsi3+0x60>
    3492:	386b 3a20      	moveaw %a3@(14880),%a4
    3496:	6d36           	blts 34ce <__mulsi3+0x66>
    3498:	386b 2043      	moveaw %a3@(8259),%a4
    349c:	5055           	addqw #8,%a5@
    349e:	2073 7065      	moveal %a3@(0000000000000065,%d7:w),%a0
    34a2:	6564           	bcss 3508 <__mulsi3+0xa0>
    34a4:	2025           	movel %a5@-,%d0
    34a6:	642e           	bccs 34d6 <__mulsi3+0x6e>
    34a8:	2564 204d      	movel %a4@-,%a2@(8269)
    34ac:	487a 2028      	pea %pc@(54d6 <_bss_end+0xf16>)
    34b0:	2564 2e25      	movel %a4@-,%a2@(11813)
    34b4:	6420           	bccs 34d6 <__mulsi3+0x6e>
    34b6:	426f 676f      	clrw %sp@(26479)
    34ba:	4d49           	.short 0x4d49
    34bc:	5053           	addqw #8,%a3@
    34be:	290a           	movel %a2,%a4@-
    34c0:	0073 7563 6365 	oriw #30051,%a3@(0000000000006564)@(0000000000000000)
    34c6:	6564 
    34c8:	6564           	bcss 352e <__mulsi3+0xc6>
    34ca:	0046 4149      	oriw #16713,%d6
    34ce:	4c45           	.short 0x4c45
    34d0:	4400           	negb %d0
    34d2:	586f 7365      	addqw #4,%sp@(29541)
    34d6:	7261           	moveq #97,%d1
    34d8:	5f67           	subqw #7,%sp@-
    34da:	6678           	bnes 3554 <__mulsi3+0xec>
    34dc:	5f74 6573 740a 	subqw #7,%a4@(00000000740a000a)@(00000000786f7365)
    34e2:	000a 786f 7365 
    34e8:	7261           	moveq #97,%d1
    34ea:	5f69 6e69      	subqw #7,%a1@(28265)
    34ee:	7428           	moveq #40,%d2
    34f0:	3129 2e2e      	movew %a1@(11822),%a0@-
    34f4:	2e00           	movel %d0,%d7
    34f6:	2573 2028 2564 	movel %a3@(0000000000000028,%d2:w),%a2@(9572)
    34fc:	7825           	moveq #37,%d4
    34fe:	6429           	bccs 3529 <__mulsi3+0xc1>
    3500:	0a00 2a2a      	eorib #42,%d0
    3504:	2a20           	movel %a0@-,%d5
    3506:	586f 7365      	addqw #4,%sp@(29541)
    350a:	7261           	moveq #97,%d1
    350c:	5f67           	subqw #7,%sp@-
    350e:	6678           	bnes 3588 <__mulsi3+0x120>
    3510:	5f74 6573 7420 	subqw #7,%a4@(0000000074206974)@(0000000065726174)
    3516:	6974 6572 6174 
    351c:	696f           	bvss 358d <__mulsi3+0x125>
    351e:	6e3a           	bgts 355a <__mulsi3+0xf2>
    3520:	2025           	movel %a5@-,%d0
    3522:	640a           	bccs 352e <__mulsi3+0xc6>
    3524:	0058 6f73      	oriw #28531,%a0@+
    3528:	6572           	bcss 359c <xosera_ptr+0x2>
    352a:	6120           	bsrs 354c <__mulsi3+0xe4>
    352c:	2325           	movel %a5@-,%a1@-
    352e:	3038 780a      	movew 780a <_bss_end+0x324a>,%d0
    3532:	004d           	.short 0x004d
    3534:	6f64           	bles 359a <xosera_ptr>
    3536:	653a           	bcss 3572 <__mulsi3+0x10a>
    3538:	2025           	movel %a5@-,%d0
    353a:	6478           	bccs 35b4 <_data_end>
    353c:	2564 2020      	movel %a4@-,%a2@(8224)
    3540:	4665           	notw %a5@-
    3542:	6174           	bsrs 35b8 <text_rows>
    3544:	7572           	.short 0x7572
    3546:	6573           	bcss 35bb <screen_addr+0x1>
    3548:	3a30 7825      	movew %a0@(0000000000000025,%d7:l),%d5
    354c:	3034 780a      	movew %a4@(000000000000000a,%d7:l),%d0
    3550:	0020 6469      	orib #105,%a0@-
    3554:	7370           	.short 0x7370
    3556:	7374           	.short 0x7374
    3558:	6172           	bsrs 35cc <dprint_buff+0x10>
    355a:	743a           	moveq #58,%d2
    355c:	3078 2530      	moveaw 2530 <_out_buffer+0xc>,%a0
    3560:	3478 2064      	moveaw 2064 <kmain+0x10>,%a2
    3564:	6973           	bvss 35d9 <dprint_buff+0x1d>
    3566:	7077           	moveq #119,%d0
    3568:	6964           	bvss 35ce <dprint_buff+0x12>
    356a:	7468           	moveq #104,%d2
    356c:	3a30 7825      	movew %a0@(0000000000000025,%d7:l),%d5
    3570:	3034 780a      	movew %a4@(000000000000000a,%d7:l),%d0
    3574:	0020 2073      	orib #115,%a0@-
    3578:	6372           	blss 35ec <dprint_buff+0x30>
    357a:	6f6c           	bles 35e8 <dprint_buff+0x2c>
    357c:	6c78           	bges 35f6 <dprint_buff+0x3a>
    357e:	793a           	.short 0x793a
    3580:	3078 2530      	moveaw 2530 <_out_buffer+0xc>,%a0
    3584:	3478 2020      	moveaw 2020 <ram+0x20>,%a2
    3588:	2067           	moveal %sp@-,%a0
    358a:	6678           	bnes 3604 <dprint_buff+0x48>
    358c:	6374           	blss 3602 <dprint_buff+0x46>
    358e:	726c           	moveq #108,%d1
    3590:	3a30 7825      	movew %a0@(0000000000000025,%d7:l),%d5
    3594:	3034 780a      	movew %a4@(000000000000000a,%d7:l),%d0
	...

0000359a <xosera_ptr>:
    359a:	00f8 0060 2872 6563 6f6e 6669 6720 6661     ...`(reconfig fa
    35aa:	696c 6564 2900                              iled).
